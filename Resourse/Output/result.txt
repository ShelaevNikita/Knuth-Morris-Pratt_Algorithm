			 The program to find patterns in text


	 Pattern ";;", number of line: 3753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 3753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "5", number of line: 3
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "list", number of line: 3754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "program", number of line: 5
   6-12
This program is free software; you can redistribute

	 Pattern "nil", number of line: 3754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "lambda", number of line: 6880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "error", number of line: 3757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 3757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "error", number of line: 2506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "text", number of line: 2506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 3759
   1-2
;; ~A, ~S

	 Pattern ";;", number of line: 2507
   1-2
;; ~^

	 Pattern ";;", number of line: 627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "error", number of line: 7506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "start", number of line: 628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "when", number of line: 2509
   14-17
            (when (search "@" params)

	 Pattern "text", number of line: 7506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 7507
   1-2
;; ~^

	 Pattern ";;", number of line: 4379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern ";;", number of line: 4380
   1-2
;;

	 Pattern "error", number of line: 4381
   16-20
(setq $stderr *error-output*

	 Pattern "aj", number of line: 6259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "error", number of line: 2510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "lambda", number of line: 6886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "text", number of line: 2510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "stream", number of line: 4386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "aj", number of line: 6262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "when", number of line: 2511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern ";;", number of line: 3762
   1-2
;; ~C

	 Pattern "+", number of line: 6265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "aj", number of line: 6266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 6266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "start", number of line: 636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "aj", number of line: 1259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "for i in select do", number of line: 8133
   4-21
   for i in select do(

	 Pattern ";;", number of line: 3764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern ";;", number of line: 5627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "start", number of line: 2518
   19-23
            (setq start pos2)

	 Pattern "start", number of line: 5628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "stream", number of line: 4388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 4388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern ";;", number of line: 9379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "error", number of line: 4389
   12-16
      (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 2520
   1-2
;; ~:P and ~:@P

	 Pattern "text", number of line: 4389
   27-30
      (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 9380
   1-2
;;

	 Pattern "error", number of line: 9381
   16-20
(setq $stderr *error-output*

	 Pattern ";;", number of line: 2521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "stream", number of line: 4390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "start", number of line: 2522
   20-24
             (setq start pos2)

	 Pattern "error", number of line: 4392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "text", number of line: 4392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern ";;", number of line: 2524
   1-2
;; default part:

	 Pattern "nil", number of line: 4393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern ";;", number of line: 2525
   1-2
;;

	 Pattern "list", number of line: 4394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern ";;", number of line: 2526
   1-2
;; loop ... 

	 Pattern "stream", number of line: 9386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "program", number of line: 11
   6-12
This program is distributed in the hope that it

	 Pattern "start", number of line: 637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern ";;", number of line: 3765
   1-2
;; ~[

	 Pattern "start", number of line: 638
   13-17
      (setq start pos2  

	 Pattern "aj", number of line: 1262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "start", number of line: 639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern ";;", number of line: 3768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "when", number of line: 3768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "+", number of line: 1265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "for i in select do", number of line: 3133
   4-21
   for i in select do(

	 Pattern "+", number of line: 643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "aj", number of line: 1266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 1266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern ";;", number of line: 3772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 3773
   1-2
;; wd: nil or width

	 Pattern "nil", number of line: 3773
   8-10
;; wd: nil or width

	 Pattern "lambda", number of line: 1880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 8753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "when", number of line: 7509
   14-17
            (when (search "@" params)

	 Pattern "error", number of line: 7510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "error", number of line: 8138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 8138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "%pi", number of line: 8753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "text", number of line: 7510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "list", number of line: 8754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "when", number of line: 7511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "nil", number of line: 8754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "case of two", number of line: 8142
   14-24
   if n=2 /* case of two points */

	 Pattern "lambda", number of line: 1886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "error", number of line: 8757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "lambda", number of line: 6895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "5", number of line: 5003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "program", number of line: 5005
   6-12
This program is free software; you can redistribute

	 Pattern "[]", number of line: 644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "text", number of line: 8757
   33-36
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 8759
   1-2
;; ~A, ~S

	 Pattern "lambda", number of line: 6901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "stream", number of line: 9388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 9388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 9389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "+", number of line: 644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "text", number of line: 9389
   27-30
      (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 645
   4-5
") ;;  newline possible spec

	 Pattern "program", number of line: 5011
   6-12
This program is distributed in the hope that it

	 Pattern "newline", number of line: 645
   8-14
") ;;  newline possible spec

	 Pattern "stream", number of line: 9390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "start", number of line: 5636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "+", number of line: 647
   17-17
      (return (1+ p)) )))

	 Pattern "error", number of line: 9392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "start", number of line: 5637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern ";;", number of line: 2529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "text", number of line: 9392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern ";;", number of line: 650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "start", number of line: 5638
   13-17
      (setq start pos2  

	 Pattern "nil", number of line: 9393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 9394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "lambda", number of line: 4394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "INTRODUCTION", number of line: 20
   16-27
/*             INTRODUCTION

	 Pattern "error", number of line: 3138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "interpolation", number of line: 22
   27-39
This package defines some interpolation techniques.

	 Pattern "+", number of line: 8143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "not correct", number of line: 3138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 8762
   1-2
;; ~C

	 Pattern "interpolation", number of line: 1271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "format", number of line: 4396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "stream", number of line: 4396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "thru", number of line: 8146
   20-23
      else for i:2 thru n do(

	 Pattern ";;", number of line: 8764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern ";;", number of line: 8765
   1-2
;; ~[

	 Pattern "nil", number of line: 4399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "+", number of line: 1273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "start", number of line: 4400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern ";;", number of line: 3774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 8768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "nil", number of line: 3774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern "nil", number of line: 4402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "when", number of line: 8768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "------------------------", number of line: 1275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern ";;", number of line: 3775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 651
   1-2
;;

	 Pattern "interpolation", number of line: 6271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "nil", number of line: 3775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 3776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 3776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 3777
   1-2
;; ov: nil or overflow character

	 Pattern "nil", number of line: 3777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 3778
   1-2
;; pc: nil or padding character

	 Pattern "+", number of line: 655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "nil", number of line: 3778
   8-10
;; pc: nil or padding character

	 Pattern "+", number of line: 6273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern ";;", number of line: 3779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 3779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 3779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 6910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern ";;", number of line: 3780
   1-2
;;

	 Pattern "+", number of line: 657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern ";;", number of line: 3781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern "kill", number of line: 6913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern ";;", number of line: 3782
   1-2
;;

	 Pattern "lambda", number of line: 9394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "lambda", number of line: 1895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "INTRODUCTION", number of line: 5020
   16-27
/*             INTRODUCTION

	 Pattern "list", number of line: 6916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "format", number of line: 9396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "+", number of line: 659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "interpolation", number of line: 5022
   27-39
This package defines some interpolation techniques.

	 Pattern "stream", number of line: 9396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "@@@", number of line: 27
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "------------------------", number of line: 6275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "nil", number of line: 9399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern ";;", number of line: 3783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern "start", number of line: 9400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "list", number of line: 6919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 6919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 3784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "+", number of line: 6277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "case of two", number of line: 3142
   14-24
   if n=2 /* case of two points */

	 Pattern "nil", number of line: 9402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "start", number of line: 7518
   19-23
            (setq start pos2)

	 Pattern ";;", number of line: 662
   1-2
;;  helper for ~v,#,vH

	 Pattern ";;", number of line: 663
   1-2
;;

	 Pattern "start", number of line: 5639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "list", number of line: 33
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern ";;", number of line: 7520
   1-2
;; ~:P and ~:@P

	 Pattern ";;", number of line: 7521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "+", number of line: 2533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "start", number of line: 7522
   20-24
             (setq start pos2)

	 Pattern "[]", number of line: 6924
   6-7
fft ([]);

	 Pattern "[]", number of line: 6925
   1-2
[];

	 Pattern ";;", number of line: 7524
   1-2
;; default part:

	 Pattern "lambda", number of line: 1901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 7525
   1-2
;;

	 Pattern "[]", number of line: 6927
   8-9
bf_fft([]);

	 Pattern ";;", number of line: 7526
   1-2
;; loop ... 

	 Pattern "+", number of line: 3143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "+", number of line: 8152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "+", number of line: 8153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "thru", number of line: 3146
   20-23
      else for i:2 thru n do(

	 Pattern "+", number of line: 666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "+", number of line: 1277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "interpolation", number of line: 8160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "nil", number of line: 667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 2540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern ";;", number of line: 3786
   1-2
;;

	 Pattern "+", number of line: 668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern ";;", number of line: 3787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "start", number of line: 4405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 5643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "when", number of line: 4406
   12-15
          (when pos1

	 Pattern "[]", number of line: 5644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 8772
   1-2
;; bf: bigfloat

	 Pattern "+", number of line: 5644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 8773
   1-2
;; wd: nil or width

	 Pattern ";;", number of line: 5645
   4-5
") ;;  newline possible spec

	 Pattern "nil", number of line: 8773
   8-10
;; wd: nil or width

	 Pattern "5", number of line: 1282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern ";;", number of line: 8774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "newline", number of line: 5645
   8-14
") ;;  newline possible spec

	 Pattern "matrix", number of line: 1282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 1282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "[]", number of line: 4409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "nil", number of line: 8774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern "list", number of line: 1283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern ";;", number of line: 8775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "5", number of line: 1283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "+", number of line: 5647
   17-17
      (return (1+ p)) )))

	 Pattern "nil", number of line: 8775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 4410
   5-6
")));; newline possible spec

	 Pattern ";;", number of line: 8776
   1-2
;; xp: nil or preferred exponent

	 Pattern "newline", number of line: 4410
   8-14
")));; newline possible spec

	 Pattern "nil", number of line: 8776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 8777
   1-2
;; ov: nil or overflow character

	 Pattern "nil", number of line: 8777
   8-10
;; ov: nil or overflow character

	 Pattern "error", number of line: 4412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern ";;", number of line: 8778
   1-2
;; pc: nil or padding character

	 Pattern "@@@", number of line: 5027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "nil", number of line: 8778
   8-10
;; pc: nil or padding character

	 Pattern "text", number of line: 4412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "5", number of line: 35
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern ";;", number of line: 8779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 8779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "matrix", number of line: 35
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern ";;", number of line: 5650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "a)", number of line: 35
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern ";;", number of line: 3792
   1-2
;;    

	 Pattern "nil", number of line: 8779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 8780
   1-2
;;

	 Pattern "list", number of line: 36
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern ";;", number of line: 5651
   1-2
;;

	 Pattern "5", number of line: 36
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern ";;", number of line: 8781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern "5", number of line: 6282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 6282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 6282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 37
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "list", number of line: 6283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 6283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 6284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "+", number of line: 5655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "start", number of line: 9405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "[]", number of line: 6928
   1-2
[];

	 Pattern ";;", number of line: 7529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "+", number of line: 1910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "a)", number of line: 6286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern ";;", number of line: 4415
   1-2
;; recognize the directive:

	 Pattern "kill", number of line: 1913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "start", number of line: 4416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "5", number of line: 8161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "matrix", number of line: 8161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 8161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 8162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 8162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "+", number of line: 7533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "list", number of line: 8163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "5", number of line: 6936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "list", number of line: 5033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "5", number of line: 6939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "a)", number of line: 8165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "+", number of line: 3152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern ";;", number of line: 8782
   1-2
;;

	 Pattern ";;", number of line: 8783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 673
   1-2
;;  find positions of matching braces

	 Pattern ";;", number of line: 3798
   1-2
;;  

	 Pattern "list", number of line: 1916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 674
   1-2
;;

	 Pattern ";;", number of line: 8784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "start", number of line: 675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "start", number of line: 676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "list", number of line: 1919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 1919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 8786
   1-2
;;

	 Pattern "5", number of line: 5035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 1284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "matrix", number of line: 5035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 5035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 5036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "5", number of line: 5036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "interpol_check_input(data,funame):=", number of line: 40
   1-35
interpol_check_input(data,funame):=

	 Pattern "list", number of line: 42
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 42
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "+", number of line: 7540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "a)", number of line: 42
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern ";;", number of line: 2554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "list", number of line: 43
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 43
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 43
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 43
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "+", number of line: 3805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "a)", number of line: 44
   17-18
   n: length(data),

	 Pattern "+", number of line: 3153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "nil", number of line: 3805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "error", number of line: 46
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 46
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern ";;", number of line: 8787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "list", number of line: 47
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 47
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 47
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "when", number of line: 9406
   12-15
          (when pos1

	 Pattern "list", number of line: 679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 679
   26-30
        ((zerop n) (list start end))

	 Pattern "start", number of line: 680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "interpolation", number of line: 3160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "[]", number of line: 9409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "5", number of line: 6292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern ";;", number of line: 9410
   5-6
")));; newline possible spec

	 Pattern "list", number of line: 5037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "newline", number of line: 9410
   8-14
")));; newline possible spec

	 Pattern "thru", number of line: 6293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "a)", number of line: 1286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "error", number of line: 9412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "text", number of line: 9412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "start", number of line: 4420
   21-25
              (setq start 0 

	 Pattern "start", number of line: 4421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "+", number of line: 5657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern ";;", number of line: 9415
   1-2
;; recognize the directive:

	 Pattern "5", number of line: 6942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "+", number of line: 5659
   19-19
        (setq n (1+ n)) ))))

	 Pattern ";;", number of line: 5662
   1-2
;;  helper for ~v,#,vH

	 Pattern "5", number of line: 6945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 5663
   1-2
;;

	 Pattern "[]", number of line: 1924
   6-7
fft ([]);

	 Pattern "[]", number of line: 1925
   1-2
[];

	 Pattern "5", number of line: 6948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "[]", number of line: 1927
   8-9
bf_fft([]);

	 Pattern "+", number of line: 5666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "[]", number of line: 1928
   1-2
[];

	 Pattern "nil", number of line: 2559
   29-31
                      loops nil )

	 Pattern "a)", number of line: 48
   25-26
      then out: sort(data)

	 Pattern "nil", number of line: 3808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "5", number of line: 3161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "nil", number of line: 2560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "matrix", number of line: 3161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 3161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 3162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 3162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "list", number of line: 3163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "+", number of line: 3809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "start", number of line: 9416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 3810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "interpol_check_input(data,funame):=", number of line: 5040
   1-35
interpol_check_input(data,funame):=

	 Pattern "draw2d", number of line: 6294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "list", number of line: 5042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 5042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 5042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "start", number of line: 9420
   21-25
              (setq start 0 

	 Pattern "list", number of line: 5043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 5043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 5043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 5043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "start", number of line: 9421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "when", number of line: 683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "a)", number of line: 5044
   17-18
   n: length(data),

	 Pattern "when", number of line: 684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "error", number of line: 5046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 5046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "list", number of line: 5047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern ";;", number of line: 8792
   1-2
;;    

	 Pattern "matrix", number of line: 49
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 49
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "+", number of line: 689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "start", number of line: 4427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "nil", number of line: 689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "a)", number of line: 50
   30-31
      then out: sort(args(data))

	 Pattern "when", number of line: 4427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "list", number of line: 51
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "+", number of line: 4428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "a)", number of line: 51
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern ";;", number of line: 4429
   1-2
;;

	 Pattern "lambda", number of line: 51
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 52
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern ";;", number of line: 4430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "error", number of line: 53
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern ";;", number of line: 8798
   1-2
;;  

	 Pattern "5", number of line: 1292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "a)", number of line: 3165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "thru", number of line: 55
   12-15
   for i:2 thru n do

	 Pattern "nil", number of line: 5667
   20-22
        ((= p len) nil)

	 Pattern "thru", number of line: 1293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "error", number of line: 57
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "5", number of line: 6951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "+", number of line: 5668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "draw2d", number of line: 1294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "%pi", number of line: 6954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 5673
   1-2
;;  find positions of matching braces

	 Pattern "load(interpol); ", number of line: 8176
   4-19
/* load(interpol);                                                                     */

	 Pattern "%pi", number of line: 6957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 5674
   1-2
;;

	 Pattern "5", number of line: 1936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "start", number of line: 5675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 8177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "5", number of line: 8177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "start", number of line: 5676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 5676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "5", number of line: 1939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "nil", number of line: 2564
   29-31
                      loops nil )

	 Pattern "nil", number of line: 2565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "5", number of line: 1942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 7554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "5", number of line: 1945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "when", number of line: 3817
   12-15
          (when (= len 0) (incf len))

	 Pattern "a)", number of line: 5047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 5047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 5048
   25-26
      then out: sort(data)

	 Pattern "matrix", number of line: 5049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 5049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 5050
   30-31
      then out: sort(args(data))

	 Pattern "+", number of line: 692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "list", number of line: 5051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "nil", number of line: 7559
   29-31
                      loops nil )

	 Pattern "a)", number of line: 5051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 5051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 5052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "error", number of line: 5053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "nil", number of line: 7560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "5", number of line: 8180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "5", number of line: 1948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "%pi", number of line: 8180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "list", number of line: 6963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "5", number of line: 1951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "draw2d", number of line: 8182
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 6966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "nil", number of line: 7564
   29-31
                      loops nil )

	 Pattern "nil", number of line: 7565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "%pi", number of line: 1954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "list", number of line: 6969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "list", number of line: 5679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 5679
   26-30
        ((zerop n) (list start end))

	 Pattern "list", number of line: 6972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "start", number of line: 5680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "interpolation", number of line: 62
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "5", number of line: 63
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 63
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 63
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 64
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 64
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "when", number of line: 5683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "+", number of line: 8805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 8805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "list", number of line: 65
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "%pi", number of line: 1957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "list", number of line: 6975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "nil", number of line: 8808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "list", number of line: 6978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "draw2d", number of line: 8188
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 1963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "list", number of line: 6981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "list", number of line: 1966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "thru", number of line: 5055
   12-15
   for i:2 thru n do

	 Pattern "list", number of line: 7575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "start", number of line: 9427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "error", number of line: 5057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "list", number of line: 2575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "when", number of line: 9427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 9428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "for i in select do", number of line: 6304
   5-22
    for i in select do(

	 Pattern ";;", number of line: 9429
   1-2
;;

	 Pattern ";;", number of line: 9430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "interpolation", number of line: 5062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "nil", number of line: 2577
   27-29
                          nil 

	 Pattern ";;", number of line: 9431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 9431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 9431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "nil", number of line: 2578
   27-29
                          nil )))

	 Pattern "5", number of line: 5063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 5063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 5063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "when", number of line: 5684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern ";;", number of line: 4431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 4431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 4431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "+", number of line: 3823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "a)", number of line: 67
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "+", number of line: 5689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 5689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern ";;", number of line: 3825
   1-2
;;  

	 Pattern "+", number of line: 5692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "load(interpol); ", number of line: 71
   4-19
/* load(interpol);                                                             */

	 Pattern "list", number of line: 5064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 5064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "when", number of line: 4432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "list", number of line: 6984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern ";;", number of line: 4434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "when", number of line: 4434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "list", number of line: 6987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "+", number of line: 4435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "nil", number of line: 7577
   27-29
                          nil 

	 Pattern "nil", number of line: 7578
   27-29
                          nil )))

	 Pattern "aj", number of line: 8193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "list", number of line: 6990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "nil", number of line: 7580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "list", number of line: 1969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "list", number of line: 6993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "+", number of line: 8809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "5", number of line: 6993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "error", number of line: 6309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "for i in select do", number of line: 1304
   5-22
    for i in select do(

	 Pattern "not correct", number of line: 6309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "+", number of line: 8810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "+", number of line: 696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "start", number of line: 7582
   23-27
                      start pos2 )

	 Pattern "list", number of line: 1972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "list", number of line: 6996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 6996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "+", number of line: 3830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "when", number of line: 3830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 3831
   1-2
;;  

	 Pattern "+", number of line: 4438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "list", number of line: 5065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "list", number of line: 6999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "when", number of line: 3832
   8-11
      (when (or ed xp)

	 Pattern "kill", number of line: 7000
   2-5
 kill (aabb)...

	 Pattern "a)", number of line: 5067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "when", number of line: 3836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 72
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "when", number of line: 9432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "for i in select do", number of line: 8197
   4-21
   for i in select do(

	 Pattern "when", number of line: 8817
   12-15
          (when (= len 0) (incf len))

	 Pattern ";;", number of line: 9434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "when", number of line: 9434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 9435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "error", number of line: 1309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 1309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 7003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "+", number of line: 701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "+", number of line: 9438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "list", number of line: 1975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "program", number of line: 7005
   6-12
This program is free software; you can redistribute

	 Pattern "error", number of line: 8202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 8202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "nil", number of line: 2580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "error", number of line: 8204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 8204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "when", number of line: 7583
   18-21
                (when loops 

	 Pattern "start", number of line: 2582
   23-27
                      start pos2 )

	 Pattern "when", number of line: 2583
   18-21
                (when loops 

	 Pattern "nil", number of line: 7585
   31-33
                  (setq loops nil) )

	 Pattern "program", number of line: 7011
   6-12
This program is distributed in the hope that it

	 Pattern "load(interpol); ", number of line: 5071
   4-19
/* load(interpol);                                                             */

	 Pattern "nil", number of line: 2585
   31-33
                  (setq loops nil) )

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 5072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 5072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "when", number of line: 9446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "5", number of line: 72
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "load(interpol); ", number of line: 3176
   4-19
/* load(interpol);                                                                     */

	 Pattern "when", number of line: 4446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "r > n-1 or r < 0", number of line: 6313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "error", number of line: 4447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "error", number of line: 6314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "text", number of line: 4447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 4448
   1-2
;;

	 Pattern "error", number of line: 8206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 8206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 4449
   1-2
;; handle some special directives:

	 Pattern "+", number of line: 3840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "interpolation", number of line: 8208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern ";;", number of line: 3841
   1-2
;;  

	 Pattern "matrix", number of line: 6317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern ";;", number of line: 4451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "case of two", number of line: 8210
   14-24
   if n=2 /* case of two points */

	 Pattern "+", number of line: 5696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "r > n-1 or r < 0", number of line: 1313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "+", number of line: 8211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "error", number of line: 1314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "list", number of line: 1978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "matrix", number of line: 1317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "+", number of line: 5701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "list", number of line: 1981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "matrix", number of line: 1318
   17-22
    coef: apply(matrix,

	 Pattern "5", number of line: 75
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "list", number of line: 1319
   21-24
                makelist(block([x,y],

	 Pattern "%pi", number of line: 75
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "nil", number of line: 5702
   9-11
        nil )

	 Pattern "list", number of line: 1984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "+", number of line: 5704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "draw2d", number of line: 77
   4-9
/* draw2d(                                                                     */

	 Pattern "nil", number of line: 702
   9-11
        nil )

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 3177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "5", number of line: 3177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "+", number of line: 704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "list", number of line: 1987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "+", number of line: 8823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern ";;", number of line: 8825
   1-2
;;  

	 Pattern "5", number of line: 3180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 3180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "5", number of line: 5075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 5075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "list", number of line: 7598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "draw2d", number of line: 5077
   4-9
/* draw2d(                                                                     */

	 Pattern "error", number of line: 9447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "text", number of line: 9447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 9448
   1-2
;;

	 Pattern "when", number of line: 4453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern ";;", number of line: 9449
   1-2
;; handle some special directives:

	 Pattern "INTRODUCTION", number of line: 7020
   16-27
/*             INTRODUCTION

	 Pattern ";;", number of line: 9451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "matrix", number of line: 6318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 6319
   21-24
                makelist(block([x,y],

	 Pattern ";;", number of line: 3848
   1-2
;;  

	 Pattern "when", number of line: 9453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern ";;", number of line: 3850
   1-2
;;

	 Pattern ";;", number of line: 3851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "------------------------", number of line: 3851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "list", number of line: 1322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "kill", number of line: 3853
   2-5
(kill (all),

	 Pattern ";;", number of line: 5709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "list", number of line: 8217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "list", number of line: 1324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "list", number of line: 8218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern ";;", number of line: 5713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "list", number of line: 1326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "+", number of line: 1326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "draw2d", number of line: 3182
   4-9
/* draw2d(                                                                             */

	 Pattern "+", number of line: 8830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "when", number of line: 8830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern "list", number of line: 6322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern ";;", number of line: 8831
   1-2
;;  

	 Pattern "interpolation", number of line: 7022
   27-39
This package defines some interpolation techniques.

	 Pattern "list", number of line: 2598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "list", number of line: 1990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern ";;", number of line: 709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 5715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 5715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "when", number of line: 8832
   8-11
      (when (or ed xp)

	 Pattern ";;", number of line: 4461
   1-2
;; ~v,#,vH

	 Pattern "when", number of line: 4463
   14-17
            (when (check-v# params)

	 Pattern "nil", number of line: 7600
   27-29
                          nil 

	 Pattern "when", number of line: 8836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "for i in select do", number of line: 5085
   4-21
   for i in select do(

	 Pattern "nil", number of line: 7601
   27-29
                          nil ))) 

	 Pattern "list", number of line: 1328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 1329
   10-13
    lov: listofvars(sol),

	 Pattern "list", number of line: 1330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "nil", number of line: 7603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "@@@", number of line: 7027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "list", number of line: 1331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "start", number of line: 7605
   23-27
                      start pos2 )

	 Pattern "lambda", number of line: 1331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 1332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "list", number of line: 5716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "+", number of line: 1332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "list", number of line: 7033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern ";;", number of line: 713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "when", number of line: 7606
   18-21
                (when loops 

	 Pattern "nil", number of line: 5716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 1333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "error", number of line: 5719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "+", number of line: 1333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "text", number of line: 5719
   33-36
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 9461
   1-2
;; ~v,#,vH

	 Pattern ";;", number of line: 1335
   1-2
;;

	 Pattern "list", number of line: 4466
   20-23
                (dolist (p prms)

	 Pattern "list", number of line: 1993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 1993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "list", number of line: 3863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "list", number of line: 1996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 1996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "thru", number of line: 3864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 3865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 3865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "thru", number of line: 8229
   12-15
   for i:2 thru n-1 do (

	 Pattern "when", number of line: 9463
   14-17
            (when (check-v# params)

	 Pattern "for i in select do", number of line: 85
   4-21
   for i in select do(

	 Pattern "list", number of line: 9466
   20-23
                (dolist (p prms)

	 Pattern "list", number of line: 1999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "list", number of line: 6324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "kill", number of line: 2000
   2-5
 kill (aabb)...

	 Pattern "+", number of line: 8840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern ";;", number of line: 8841
   1-2
;;  

	 Pattern "nil", number of line: 7608
   31-33
                  (setq loops nil) )

	 Pattern "list", number of line: 6326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "5", number of line: 7035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "+", number of line: 6326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "matrix", number of line: 7035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 7035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern ";;", number of line: 7610
   1-2
;; ... or don't loop ...

	 Pattern "list", number of line: 7036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "5", number of line: 7036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "list", number of line: 6328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 7037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "list", number of line: 6329
   10-13
    lov: listofvars(sol),

	 Pattern "draw2d", number of line: 3188
   4-9
/* draw2d(                                                                             */

	 Pattern ";;", number of line: 7613
   1-2
;; ... set the position in ctrls ...

	 Pattern "list", number of line: 6330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "start", number of line: 7615
   15-19
        (setq start pos2)

	 Pattern "list", number of line: 6331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern ";;", number of line: 7616
   1-2
;; ... and take the next argument

	 Pattern "nil", number of line: 2600
   27-29
                          nil 

	 Pattern "interpol_check_input(data,funame):=", number of line: 7040
   1-35
interpol_check_input(data,funame):=

	 Pattern ";;", number of line: 1336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern ";;", number of line: 715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "~*~  PRINTF  ~*~", number of line: 1336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "%pi", number of line: 715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "error", number of line: 5090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 5090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 1337
   1-2
;;

	 Pattern "list", number of line: 716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "error", number of line: 719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "thru", number of line: 5094
   12-15
   for i:1 thru n do(

	 Pattern "text", number of line: 719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "nil", number of line: 2601
   27-29
                          nil ))) 

	 Pattern "nil", number of line: 2603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "aj", number of line: 3193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "start", number of line: 2605
   23-27
                      start pos2 )

	 Pattern "when", number of line: 2606
   18-21
                (when loops 

	 Pattern ";;", number of line: 8848
   1-2
;;  

	 Pattern ";;", number of line: 8850
   1-2
;;

	 Pattern "lambda", number of line: 6331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern ";;", number of line: 8851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "list", number of line: 6332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 6332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "------------------------", number of line: 8851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "list", number of line: 6333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "kill", number of line: 8853
   2-5
(kill (all),

	 Pattern "+", number of line: 6333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 6335
   1-2
;;

	 Pattern "start", number of line: 7624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern ";;", number of line: 6336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 6336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "nil", number of line: 7624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern ";;", number of line: 1338
   1-2
;; Formatted printing to character streams

	 Pattern "5", number of line: 2003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern ";;", number of line: 6337
   1-2
;;

	 Pattern "stream", number of line: 1338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 1339
   1-2
;;

	 Pattern ";;", number of line: 6338
   1-2
;; Formatted printing to character streams

	 Pattern ";;", number of line: 1340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 1340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "program", number of line: 2005
   6-12
This program is free software; you can redistribute

	 Pattern "stream", number of line: 6338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 6339
   1-2
;;

	 Pattern "error", number of line: 90
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 1341
   1-2
;; Licence       : GPL2

	 Pattern ";;", number of line: 6340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "not correct", number of line: 90
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 6340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "+", number of line: 8230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern ";;", number of line: 1342
   1-2
;;

	 Pattern ";;", number of line: 1343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "+", number of line: 8231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "thru", number of line: 5096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 1344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 1344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 1345
   1-2
;;

	 Pattern "+", number of line: 5098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "thru", number of line: 94
   12-15
   for i:1 thru n do(

	 Pattern "+", number of line: 8233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "list", number of line: 7042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "thru", number of line: 96
   15-18
      for k:1 thru n do

	 Pattern "matrix", number of line: 7042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 7042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "list", number of line: 7043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 7043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 7043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 7043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "program", number of line: 2011
   6-12
This program is distributed in the hope that it

	 Pattern ";;", number of line: 6341
   1-2
;; Licence       : GPL2

	 Pattern ";;", number of line: 7627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "format", number of line: 1349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern ";;", number of line: 6342
   1-2
;;

	 Pattern "start", number of line: 7628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern ";;", number of line: 6343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern ";;", number of line: 6344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 6344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 6345
   1-2
;;

	 Pattern "format", number of line: 1353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern ";;", number of line: 4479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "format", number of line: 6349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "+", number of line: 98
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern ";;", number of line: 4482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern ";;", number of line: 4483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "a)", number of line: 7044
   17-18
   n: length(data),

	 Pattern "nil", number of line: 4483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "error", number of line: 7046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 7046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "list", number of line: 7047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "start", number of line: 4485
   23-27
                (setq start pos2)

	 Pattern "a)", number of line: 7047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 7047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 7048
   25-26
      then out: sort(data)

	 Pattern "list", number of line: 4488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "+", number of line: 8235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "a)", number of line: 1363
   19-20
(in-package :maxima)

	 Pattern "list", number of line: 8863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "(in-package :maxima)", number of line: 1363
   1-20
(in-package :maxima)

	 Pattern "nil", number of line: 2608
   31-33
                  (setq loops nil) )

	 Pattern "error", number of line: 4489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 4489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 2610
   1-2
;; ... or don't loop ...

	 Pattern "text", number of line: 4489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 4490
   1-2
;; ~?

	 Pattern "interpolation", number of line: 5110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern " Linear interpolation. The argument must be either:", number of line: 5110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern ";;", number of line: 2613
   1-2
;; ... set the position in ctrls ...

	 Pattern "5", number of line: 5111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern ";;", number of line: 4494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "matrix", number of line: 5111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 5111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "start", number of line: 2615
   15-19
        (setq start pos2)

	 Pattern "list", number of line: 5112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 5112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern ";;", number of line: 2616
   1-2
;; ... and take the next argument

	 Pattern "list", number of line: 3869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "matrix", number of line: 7049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern ";;", number of line: 9479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "a)", number of line: 7049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "start", number of line: 7636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "thru", number of line: 3870
   15-18
    for j : 0 thru n - 1

	 Pattern "start", number of line: 7637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "+", number of line: 3871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 3871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern ";;", number of line: 5735
   1-2
;; ~E, ~F, ~G

	 Pattern "start", number of line: 7638
   13-17
      (setq start pos2  

	 Pattern "start", number of line: 7639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern ";;", number of line: 5739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern ";;", number of line: 9482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "+", number of line: 7643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "format", number of line: 6353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "[]", number of line: 7644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 5741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern ";;", number of line: 9483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "%pi", number of line: 5741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "+", number of line: 7644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "for i in select do", number of line: 3197
   4-21
   for i in select do(

	 Pattern "list", number of line: 5742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 9483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "nil", number of line: 5742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "INTRODUCTION", number of line: 2020
   16-27
/*             INTRODUCTION

	 Pattern "start", number of line: 9485
   23-27
                (setq start pos2)

	 Pattern "interpolation", number of line: 2022
   27-39
This package defines some interpolation techniques.

	 Pattern "thru", number of line: 8864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 8865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 8865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "interpolation", number of line: 110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern " Linear interpolation. The argument must be either:", number of line: 110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "error", number of line: 3202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 3202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "5", number of line: 111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 8869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "@@@", number of line: 2027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "list", number of line: 113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "thru", number of line: 8870
   15-18
    for j : 0 thru n - 1

	 Pattern "+", number of line: 8871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 8871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern ";;", number of line: 1365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "error", number of line: 3204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "a)", number of line: 115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "not correct", number of line: 3204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern ";;", number of line: 1366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "list", number of line: 5113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "+", number of line: 8244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern ";;", number of line: 1367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern "nil", number of line: 4497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern ";;", number of line: 1368
   1-2
;;

	 Pattern "thru", number of line: 8247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "a)", number of line: 5115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "+", number of line: 8248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "thru", number of line: 8251
   12-15
   for j:2 thru n do (

	 Pattern "a)", number of line: 7050
   30-31
      then out: sort(args(data))

	 Pattern "list", number of line: 7051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "a)", number of line: 7051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 7051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 7052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "error", number of line: 7053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "lambda", number of line: 3880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "thru", number of line: 7055
   12-15
   for i:2 thru n do

	 Pattern "start", number of line: 2624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern ";;", number of line: 7645
   4-5
") ;;  newline possible spec

	 Pattern "list", number of line: 9488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "newline", number of line: 7645
   8-14
") ;;  newline possible spec

	 Pattern "a)", number of line: 6363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 6363
   1-20
(in-package :maxima)

	 Pattern "error", number of line: 9489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 9489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "+", number of line: 7647
   17-17
      (return (1+ p)) )))

	 Pattern ";;", number of line: 6365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "text", number of line: 9489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 9490
   1-2
;; ~?

	 Pattern ";;", number of line: 6366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern ";;", number of line: 7650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern ";;", number of line: 7651
   1-2
;;

	 Pattern ";;", number of line: 6367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 6368
   1-2
;;

	 Pattern "lambda", number of line: 8880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 9494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern ";;", number of line: 735
   1-2
;; ~E, ~F, ~G

	 Pattern "list", number of line: 2033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "nil", number of line: 2624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "error", number of line: 3206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 3206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 2627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "interpolation", number of line: 3208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "5", number of line: 2035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "start", number of line: 2628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "matrix", number of line: 2035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 2035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 2036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "error", number of line: 7057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "5", number of line: 2036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "case of two", number of line: 3210
   14-24
   if n=2 /* case of two points */

	 Pattern "list", number of line: 2037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "+", number of line: 3211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "interpolation", number of line: 7062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "5", number of line: 7063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "error", number of line: 5745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "matrix", number of line: 7063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 7063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "text", number of line: 5745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 7064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 7064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "lambda", number of line: 3886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 5747
   1-2
;; ~D

	 Pattern "load(interpol); ", number of line: 5119
   4-19
/* load(interpol);                                                             */

	 Pattern "+", number of line: 7655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 5120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 5120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "+", number of line: 7657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern ";;", number of line: 5751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "load(interpol); ", number of line: 119
   4-19
/* load(interpol);                                                             */

	 Pattern "nil", number of line: 9497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "error", number of line: 4506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 1379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "text", number of line: 4506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 4507
   1-2
;; ~^

	 Pattern ";;", number of line: 1380
   1-2
;;

	 Pattern ";;", number of line: 739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "list", number of line: 3217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "when", number of line: 4509
   14-17
            (when (search "@" params)

	 Pattern "error", number of line: 4510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "list", number of line: 3218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "text", number of line: 4510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern ";;", number of line: 741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "lambda", number of line: 3895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "+", number of line: 7659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "nil", number of line: 742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "5", number of line: 5123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 5123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "error", number of line: 1381
   16-20
(setq $stderr *error-output*

	 Pattern "interpol_check_input(data,funame):=", number of line: 2040
   1-35
interpol_check_input(data,funame):=

	 Pattern "aj", number of line: 8259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "start", number of line: 2636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "list", number of line: 2042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 2042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 2042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "list", number of line: 2043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "start", number of line: 2637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "error", number of line: 2043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 2043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 2043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "start", number of line: 2638
   13-17
      (setq start pos2  

	 Pattern "list", number of line: 7065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern ";;", number of line: 7662
   1-2
;;  helper for ~v,#,vH

	 Pattern "a)", number of line: 2044
   17-18
   n: length(data),

	 Pattern "start", number of line: 2639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern ";;", number of line: 7663
   1-2
;;

	 Pattern "error", number of line: 2046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "stream", number of line: 1386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "aj", number of line: 8262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "stream", number of line: 1388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 1388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 1389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "text", number of line: 1389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "+", number of line: 8265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "lambda", number of line: 3901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "aj", number of line: 8266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 8266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "when", number of line: 4511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern ";;", number of line: 5753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 5753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 5754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "interpolation", number of line: 8271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "error", number of line: 9506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "+", number of line: 2643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "error", number of line: 745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "+", number of line: 7666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "[]", number of line: 2644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "text", number of line: 745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "+", number of line: 2644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "start", number of line: 4518
   19-23
            (setq start pos2)

	 Pattern "nil", number of line: 7667
   20-22
        ((= p len) nil)

	 Pattern ";;", number of line: 2645
   4-5
") ;;  newline possible spec

	 Pattern "newline", number of line: 2645
   8-14
") ;;  newline possible spec

	 Pattern ";;", number of line: 747
   1-2
;; ~D

	 Pattern "draw2d", number of line: 5125
   4-9
/* draw2d(                                                                     */

	 Pattern "+", number of line: 2647
   17-17
      (return (1+ p)) )))

	 Pattern "a)", number of line: 7067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern ";;", number of line: 2650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern ";;", number of line: 751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "+", number of line: 7668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "load(interpol); ", number of line: 7071
   4-19
/* load(interpol);                                                             */

	 Pattern "lambda", number of line: 8886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "Argument to", number of line: 2046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 7072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 7673
   1-2
;;  find positions of matching braces

	 Pattern "5", number of line: 7072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 2047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 2047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "stream", number of line: 1390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "lambda", number of line: 2047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "5", number of line: 123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "a)", number of line: 2048
   25-26
      then out: sort(data)

	 Pattern "%pi", number of line: 123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "error", number of line: 1392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "matrix", number of line: 2049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 2049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "text", number of line: 1392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "a)", number of line: 2050
   30-31
      then out: sort(args(data))

	 Pattern "draw2d", number of line: 125
   4-9
/* draw2d(                                                                     */

	 Pattern "nil", number of line: 1393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 2051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 1394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "a)", number of line: 2051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 2051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 1394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "list", number of line: 2052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern ";;", number of line: 6379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "error", number of line: 2053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "format", number of line: 1396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern ";;", number of line: 6380
   1-2
;;

	 Pattern "stream", number of line: 1396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "error", number of line: 6381
   16-20
(setq $stderr *error-output*

	 Pattern "thru", number of line: 2055
   12-15
   for i:2 thru n do

	 Pattern "lambda", number of line: 8895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "error", number of line: 2057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "+", number of line: 3910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "for i in select do", number of line: 133
   4-21
   for i in select do(

	 Pattern "kill", number of line: 3913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "interpolation", number of line: 2062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern ";;", number of line: 7674
   1-2
;;

	 Pattern "start", number of line: 7675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "5", number of line: 2063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 2063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "nil", number of line: 1399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "a)", number of line: 2063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "start", number of line: 1400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "list", number of line: 3916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "list", number of line: 2064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "start", number of line: 7676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 7676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "stream", number of line: 6386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "nil", number of line: 1402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "list", number of line: 3919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 3919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "list", number of line: 7679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 7679
   26-30
        ((zerop n) (list start end))

	 Pattern "stream", number of line: 6388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 6388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 6389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "start", number of line: 7680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "start", number of line: 1405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "text", number of line: 6389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "5", number of line: 2064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "stream", number of line: 6390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "list", number of line: 2065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "[]", number of line: 3924
   6-7
fft ([]);

	 Pattern "[]", number of line: 3925
   1-2
[];

	 Pattern "when", number of line: 1406
   12-15
          (when pos1

	 Pattern "[]", number of line: 3927
   8-9
bf_fft([]);

	 Pattern "[]", number of line: 3928
   1-2
[];

	 Pattern "a)", number of line: 2067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "error", number of line: 138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 7075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "not correct", number of line: 138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "%pi", number of line: 7075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "lambda", number of line: 8901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "draw2d", number of line: 7077
   4-9
/* draw2d(                                                                     */

	 Pattern "error", number of line: 6392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "5", number of line: 3936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "text", number of line: 6392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "nil", number of line: 6393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "for i in select do", number of line: 5133
   4-21
   for i in select do(

	 Pattern "list", number of line: 6394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "case of two", number of line: 142
   14-24
   if n=2 /* case of two points */

	 Pattern "lambda", number of line: 6394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "+", number of line: 143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "when", number of line: 7683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "format", number of line: 6396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "when", number of line: 7684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "stream", number of line: 6396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "+", number of line: 8910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "+", number of line: 8273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "+", number of line: 7689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "thru", number of line: 3229
   12-15
   for i:2 thru n-1 do (

	 Pattern "text", number of line: 9506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "nil", number of line: 7689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern ";;", number of line: 9507
   1-2
;; ~^

	 Pattern "+", number of line: 3230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "+", number of line: 3231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "------------------------", number of line: 8275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "nil", number of line: 5754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "when", number of line: 9509
   14-17
            (when (search "@" params)

	 Pattern "error", number of line: 9510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "+", number of line: 3233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "error", number of line: 5757
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 2651
   1-2
;;

	 Pattern "text", number of line: 9510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "text", number of line: 5757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "when", number of line: 9511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "+", number of line: 3235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern ";;", number of line: 5759
   1-2
;; ~A, ~S

	 Pattern ";;", number of line: 4520
   1-2
;; ~:P and ~:@P

	 Pattern "+", number of line: 2655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern ";;", number of line: 753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern ";;", number of line: 4521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "list", number of line: 754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 5762
   1-2
;; ~C

	 Pattern "+", number of line: 2657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "start", number of line: 4522
   20-24
             (setq start pos2)

	 Pattern "nil", number of line: 754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 4524
   1-2
;; default part:

	 Pattern "+", number of line: 2659
   19-19
        (setq n (1+ n)) ))))

	 Pattern ";;", number of line: 4525
   1-2
;;

	 Pattern "error", number of line: 757
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 4526
   1-2
;; loop ... 

	 Pattern "text", number of line: 757
   33-36
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 759
   1-2
;; ~A, ~S

	 Pattern "error", number of line: 5138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 4529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "not correct", number of line: 5138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "load(interpol); ", number of line: 2071
   4-19
/* load(interpol);                                                             */

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 2072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "[]", number of line: 1409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "5", number of line: 2072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 3939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "5", number of line: 3942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "thru", number of line: 146
   20-23
      else for i:2 thru n do(

	 Pattern "nil", number of line: 6399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "start", number of line: 6400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "5", number of line: 3945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "kill", number of line: 8913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "for i in select do", number of line: 7085
   4-21
   for i in select do(

	 Pattern "list", number of line: 8916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "+", number of line: 7692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "+", number of line: 8277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "list", number of line: 8919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 8919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "+", number of line: 7696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern ";;", number of line: 5764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "5", number of line: 8282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 8282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern ";;", number of line: 5765
   1-2
;; ~[

	 Pattern "a)", number of line: 8282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern ";;", number of line: 1410
   5-6
")));; newline possible spec

	 Pattern "list", number of line: 8283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "newline", number of line: 1410
   8-14
")));; newline possible spec

	 Pattern "nil", number of line: 6402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "error", number of line: 1412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "text", number of line: 1412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "start", number of line: 6405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "start", number of line: 9518
   19-23
            (setq start pos2)

	 Pattern ";;", number of line: 1415
   1-2
;; recognize the directive:

	 Pattern "when", number of line: 6406
   12-15
          (when pos1

	 Pattern "start", number of line: 1416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern ";;", number of line: 9520
   1-2
;; ~:P and ~:@P

	 Pattern ";;", number of line: 5768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern ";;", number of line: 9521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "when", number of line: 5768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "[]", number of line: 6409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern ";;", number of line: 5772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 2662
   1-2
;;  helper for ~v,#,vH

	 Pattern ";;", number of line: 5773
   1-2
;; wd: nil or width

	 Pattern ";;", number of line: 2663
   1-2
;;

	 Pattern ";;", number of line: 762
   1-2
;; ~C

	 Pattern "case of two", number of line: 5142
   14-24
   if n=2 /* case of two points */

	 Pattern "+", number of line: 2666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern ";;", number of line: 764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "+", number of line: 4533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "+", number of line: 5143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern ";;", number of line: 765
   1-2
;; ~[

	 Pattern "nil", number of line: 2667
   20-22
        ((= p len) nil)

	 Pattern "5", number of line: 3948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern ";;", number of line: 768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "+", number of line: 2668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "error", number of line: 7090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "when", number of line: 768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "not correct", number of line: 7090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 2075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 2075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "5", number of line: 3951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "draw2d", number of line: 2077
   4-9
/* draw2d(                                                                     */

	 Pattern ";;", number of line: 2673
   1-2
;;  find positions of matching braces

	 Pattern "%pi", number of line: 3954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 2674
   1-2
;;

	 Pattern "+", number of line: 152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "+", number of line: 153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "%pi", number of line: 3957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "+", number of line: 4540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "5", number of line: 8283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern ";;", number of line: 772
   1-2
;; bf: bigfloat

	 Pattern "start", number of line: 9522
   20-24
             (setq start pos2)

	 Pattern "list", number of line: 8284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "thru", number of line: 7094
   12-15
   for i:1 thru n do(

	 Pattern "interpolation", number of line: 160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern ";;", number of line: 9524
   1-2
;; default part:

	 Pattern "thru", number of line: 7096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 9525
   1-2
;;

	 Pattern ";;", number of line: 9526
   1-2
;; loop ... 

	 Pattern ";;", number of line: 773
   1-2
;; wd: nil or width

	 Pattern "a)", number of line: 8286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "nil", number of line: 773
   8-10
;; wd: nil or width

	 Pattern "+", number of line: 7098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern ";;", number of line: 774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "nil", number of line: 774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 9529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "nil", number of line: 775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 776
   1-2
;; xp: nil or preferred exponent

	 Pattern "[]", number of line: 8924
   6-7
fft ([]);

	 Pattern "+", number of line: 3244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "nil", number of line: 776
   8-10
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 5773
   8-10
;; wd: nil or width

	 Pattern ";;", number of line: 5774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "list", number of line: 3963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "nil", number of line: 5774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern "5", number of line: 8292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern ";;", number of line: 5775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "for i in select do", number of line: 2085
   4-21
   for i in select do(

	 Pattern ";;", number of line: 6410
   5-6
")));; newline possible spec

	 Pattern "newline", number of line: 6410
   8-14
")));; newline possible spec

	 Pattern "list", number of line: 3966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "thru", number of line: 5146
   20-23
      else for i:2 thru n do(

	 Pattern "start", number of line: 1420
   21-25
              (setq start 0 

	 Pattern "nil", number of line: 5775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 5776
   1-2
;; xp: nil or preferred exponent

	 Pattern "start", number of line: 1421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "nil", number of line: 5776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 5777
   1-2
;; ov: nil or overflow character

	 Pattern "+", number of line: 7701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "error", number of line: 6412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "nil", number of line: 7702
   9-11
        nil )

	 Pattern "text", number of line: 6412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "+", number of line: 7704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern ";;", number of line: 6415
   1-2
;; recognize the directive:

	 Pattern "+", number of line: 5152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "start", number of line: 6416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "start", number of line: 1427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 5153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "start", number of line: 2675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "nil", number of line: 5777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 5778
   1-2
;; pc: nil or padding character

	 Pattern "start", number of line: 2676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 2676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "nil", number of line: 5778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 777
   1-2
;; ov: nil or overflow character

	 Pattern "nil", number of line: 777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 778
   1-2
;; pc: nil or padding character

	 Pattern "error", number of line: 2090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "not correct", number of line: 2090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "matrix", number of line: 161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "+", number of line: 9533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "5", number of line: 162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "list", number of line: 163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "thru", number of line: 2094
   12-15
   for i:1 thru n do(

	 Pattern "thru", number of line: 2096
   15-18
      for k:1 thru n do

	 Pattern "a)", number of line: 165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "thru", number of line: 3247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "nil", number of line: 778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 5779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 5779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 7709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "nil", number of line: 5779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 5780
   1-2
;;

	 Pattern ";;", number of line: 780
   1-2
;;

	 Pattern ";;", number of line: 5781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 5782
   1-2
;;

	 Pattern ";;", number of line: 782
   1-2
;;

	 Pattern ";;", number of line: 5783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 7713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern ";;", number of line: 5784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "interpolation", number of line: 5160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern ";;", number of line: 784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern ";;", number of line: 7715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 7715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "[]", number of line: 8925
   1-2
[];

	 Pattern "list", number of line: 7716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "5", number of line: 5161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern ";;", number of line: 5786
   1-2
;;

	 Pattern "matrix", number of line: 5161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 5161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "[]", number of line: 8927
   8-9
bf_fft([]);

	 Pattern ";;", number of line: 5787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "list", number of line: 5162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "list", number of line: 3969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "[]", number of line: 8928
   1-2
[];

	 Pattern "thru", number of line: 8293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "draw2d", number of line: 8294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "list", number of line: 2679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 2679
   26-30
        ((zerop n) (list start end))

	 Pattern "list", number of line: 3972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "start", number of line: 2680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "list", number of line: 3975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "5", number of line: 8936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "when", number of line: 2683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "list", number of line: 3978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "5", number of line: 5162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "+", number of line: 3248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "list", number of line: 5163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "5", number of line: 8939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "thru", number of line: 3251
   12-15
   for j:2 thru n do (

	 Pattern "5", number of line: 8942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "a)", number of line: 5165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern ";;", number of line: 5792
   1-2
;;    

	 Pattern "5", number of line: 8945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "nil", number of line: 7716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "5", number of line: 8948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern ";;", number of line: 786
   1-2
;;

	 Pattern ";;", number of line: 787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "error", number of line: 7719
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 4554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "+", number of line: 9540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "text", number of line: 7719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "+", number of line: 2098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern ";;", number of line: 792
   1-2
;;    

	 Pattern "start", number of line: 6420
   21-25
              (setq start 0 

	 Pattern "start", number of line: 6421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "nil", number of line: 4559
   29-31
                      loops nil )

	 Pattern "when", number of line: 1427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 1428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern ";;", number of line: 1429
   1-2
;;

	 Pattern "list", number of line: 3981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "for i in select do", number of line: 8304
   5-22
    for i in select do(

	 Pattern ";;", number of line: 1430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern ";;", number of line: 1431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 1431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "list", number of line: 3984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "when", number of line: 1431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 2684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "when", number of line: 1432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "list", number of line: 3987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern ";;", number of line: 1434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 2689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 2689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "5", number of line: 8951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "+", number of line: 2692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern ";;", number of line: 5798
   1-2
;;  

	 Pattern "%pi", number of line: 8954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "interpolation", number of line: 7110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern " Linear interpolation. The argument must be either:", number of line: 7110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "5", number of line: 7111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 7111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 7111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 7112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 7112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "start", number of line: 6427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern ";;", number of line: 798
   1-2
;;  

	 Pattern "list", number of line: 7113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "when", number of line: 6427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "aj", number of line: 3259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "list", number of line: 3990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "+", number of line: 2696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "aj", number of line: 3262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "list", number of line: 3993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "load(interpol); ", number of line: 5176
   4-19
/* load(interpol);                                                                     */

	 Pattern "5", number of line: 3993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 5177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "5", number of line: 5177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "list", number of line: 3996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "+", number of line: 3265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "5", number of line: 3996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "when", number of line: 1434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 1435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "interpolation", number of line: 2110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern "+", number of line: 2701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern " Linear interpolation. The argument must be either:", number of line: 2110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "nil", number of line: 4560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "list", number of line: 3999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "+", number of line: 1438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "5", number of line: 2111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 2111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 2111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 2112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 2112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 2113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "nil", number of line: 4564
   29-31
                      loops nil )

	 Pattern "nil", number of line: 4565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "+", number of line: 6428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern ";;", number of line: 6429
   1-2
;;

	 Pattern ";;", number of line: 6430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern ";;", number of line: 6431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 6431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 6431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "error", number of line: 8309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "when", number of line: 6432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "not correct", number of line: 8309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 9554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern ";;", number of line: 6434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "when", number of line: 6434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 6435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "r > n-1 or r < 0", number of line: 8313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "error", number of line: 8314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "%pi", number of line: 8957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "a)", number of line: 7115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 8963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "+", number of line: 5805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 5805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "+", number of line: 805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "list", number of line: 8966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "nil", number of line: 805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 5808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "load(interpol); ", number of line: 7119
   4-19
/* load(interpol);                                                             */

	 Pattern "+", number of line: 5809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "nil", number of line: 2702
   9-11
        nil )

	 Pattern "kill", number of line: 4000
   2-5
 kill (aabb)...

	 Pattern "+", number of line: 5810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "aj", number of line: 3266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 3266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 2704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "5", number of line: 4003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "list", number of line: 8969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "program", number of line: 4005
   6-12
This program is free software; you can redistribute

	 Pattern "matrix", number of line: 8317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "nil", number of line: 9559
   29-31
                      loops nil )

	 Pattern "matrix", number of line: 8318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 8972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "nil", number of line: 9560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "list", number of line: 8319
   21-24
                makelist(block([x,y],

	 Pattern "list", number of line: 8975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "load(interpol); ", number of line: 176
   4-19
/* load(interpol);                                                                     */

	 Pattern "+", number of line: 6438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "5", number of line: 177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "list", number of line: 8322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "nil", number of line: 808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 7120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 7120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "interpolation", number of line: 3271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern ";;", number of line: 2709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "5", number of line: 7123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "when", number of line: 1446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "%pi", number of line: 7123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "+", number of line: 3273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "error", number of line: 1447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "nil", number of line: 9564
   29-31
                      loops nil )

	 Pattern "a)", number of line: 2115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 8324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "nil", number of line: 9565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "list", number of line: 8326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "+", number of line: 8326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern ";;", number of line: 7735
   1-2
;; ~E, ~F, ~G

	 Pattern "list", number of line: 8328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "load(interpol); ", number of line: 2119
   4-19
/* load(interpol);                                                             */

	 Pattern "list", number of line: 8329
   10-13
    lov: listofvars(sol),

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 2120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 8330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "5", number of line: 2120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 7739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "list", number of line: 8331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern ";;", number of line: 2713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "lambda", number of line: 8331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 8332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 8332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "list", number of line: 9575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "list", number of line: 8333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 2715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 2715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "+", number of line: 8333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "list", number of line: 2716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 8335
   1-2
;;

	 Pattern "nil", number of line: 2716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 8336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 8336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "nil", number of line: 9577
   27-29
                          nil 

	 Pattern ";;", number of line: 8337
   1-2
;;

	 Pattern "nil", number of line: 9578
   27-29
                          nil )))

	 Pattern "error", number of line: 2719
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 8338
   1-2
;; Formatted printing to character streams

	 Pattern "text", number of line: 2719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "stream", number of line: 8338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 8339
   1-2
;;

	 Pattern "list", number of line: 8978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "list", number of line: 4575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "+", number of line: 809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "program", number of line: 4011
   6-12
This program is distributed in the hope that it

	 Pattern "list", number of line: 8981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "+", number of line: 810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "list", number of line: 8984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "when", number of line: 5817
   12-15
          (when (= len 0) (incf len))

	 Pattern "list", number of line: 8987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "5", number of line: 180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "+", number of line: 5823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "INTRODUCTION", number of line: 4020
   16-27
/*             INTRODUCTION

	 Pattern "draw2d", number of line: 182
   4-9
/* draw2d(                                                                             */

	 Pattern "interpolation", number of line: 4022
   27-39
This package defines some interpolation techniques.

	 Pattern ";;", number of line: 5825
   1-2
;;  

	 Pattern "when", number of line: 6446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "error", number of line: 6447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 8340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 8340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 8341
   1-2
;; Licence       : GPL2

	 Pattern "@@@", number of line: 4027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "nil", number of line: 4577
   27-29
                          nil 

	 Pattern ";;", number of line: 8342
   1-2
;;

	 Pattern "nil", number of line: 9580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern ";;", number of line: 8343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "nil", number of line: 4578
   27-29
                          nil )))

	 Pattern ";;", number of line: 8344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "start", number of line: 9582
   23-27
                      start pos2 )

	 Pattern "stringproc.texi ", number of line: 8344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 8345
   1-2
;;

	 Pattern "nil", number of line: 4580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "when", number of line: 9583
   18-21
                (when loops 

	 Pattern "start", number of line: 4582
   23-27
                      start pos2 )

	 Pattern "format", number of line: 8349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "nil", number of line: 9585
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 7741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 7741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 7742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 7742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "draw2d", number of line: 7125
   4-9
/* draw2d(                                                                     */

	 Pattern "text", number of line: 1447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "5", number of line: 2123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern ";;", number of line: 1448
   1-2
;;

	 Pattern "%pi", number of line: 2123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern ";;", number of line: 1449
   1-2
;; handle some special directives:

	 Pattern "error", number of line: 7745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 7745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "------------------------", number of line: 3275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "draw2d", number of line: 2125
   4-9
/* draw2d(                                                                     */

	 Pattern ";;", number of line: 1451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern ";;", number of line: 7747
   1-2
;; ~D

	 Pattern "+", number of line: 3277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "when", number of line: 1453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "5", number of line: 5180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 5180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "list", number of line: 8990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "draw2d", number of line: 5182
   4-9
/* draw2d(                                                                             */

	 Pattern "when", number of line: 817
   12-15
          (when (= len 0) (incf len))

	 Pattern "list", number of line: 8993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 8993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "list", number of line: 8996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 8996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "+", number of line: 823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "text", number of line: 6447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 6448
   1-2
;;

	 Pattern ";;", number of line: 6449
   1-2
;; handle some special directives:

	 Pattern ";;", number of line: 825
   1-2
;;  

	 Pattern "list", number of line: 8999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "draw2d", number of line: 188
   4-9
/* draw2d(                                                                             */

	 Pattern "+", number of line: 5830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "for i in select do", number of line: 7133
   4-21
   for i in select do(

	 Pattern "when", number of line: 5830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 6451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern ";;", number of line: 5831
   1-2
;;  

	 Pattern "when", number of line: 5832
   8-11
      (when (or ed xp)

	 Pattern "list", number of line: 4033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "when", number of line: 6453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "kill", number of line: 9000
   2-5
 kill (aabb)...

	 Pattern "5", number of line: 4035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "matrix", number of line: 4035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 4035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 4036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "5", number of line: 9003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "5", number of line: 3282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 3282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 3282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 3283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "program", number of line: 9005
   6-12
This program is free software; you can redistribute

	 Pattern "5", number of line: 3283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 3284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern ";;", number of line: 7751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "aj", number of line: 193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern ";;", number of line: 7753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 7753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "a)", number of line: 3286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 7754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 7754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 6461
   1-2
;; ~v,#,vH

	 Pattern "draw2d", number of line: 5188
   4-9
/* draw2d(                                                                             */

	 Pattern ";;", number of line: 1461
   1-2
;; ~v,#,vH

	 Pattern "for i in select do", number of line: 2133
   4-21
   for i in select do(

	 Pattern "when", number of line: 5836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "format", number of line: 8353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern ";;", number of line: 2735
   1-2
;; ~E, ~F, ~G

	 Pattern "+", number of line: 5840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "when", number of line: 1463
   14-17
            (when (check-v# params)

	 Pattern "when", number of line: 6463
   14-17
            (when (check-v# params)

	 Pattern "aj", number of line: 5193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "list", number of line: 6466
   20-23
                (dolist (p prms)

	 Pattern "list", number of line: 1466
   20-23
                (dolist (p prms)

	 Pattern "for i in select do", number of line: 5197
   4-21
   for i in select do(

	 Pattern "error", number of line: 7138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 7138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 5841
   1-2
;;  

	 Pattern "when", number of line: 4583
   18-21
                (when loops 

	 Pattern "5", number of line: 4036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "list", number of line: 4037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "nil", number of line: 4585
   31-33
                  (setq loops nil) )

	 Pattern "program", number of line: 9011
   6-12
This program is distributed in the hope that it

	 Pattern "+", number of line: 830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "when", number of line: 830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern "error", number of line: 7757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 7757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "for i in select do", number of line: 197
   4-21
   for i in select do(

	 Pattern ";;", number of line: 7759
   1-2
;; ~A, ~S

	 Pattern "interpol_check_input(data,funame):=", number of line: 4040
   1-35
interpol_check_input(data,funame):=

	 Pattern "list", number of line: 4042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 4042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 4042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern ";;", number of line: 7762
   1-2
;; ~C

	 Pattern "list", number of line: 4043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 4043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern ";;", number of line: 831
   1-2
;;  

	 Pattern "error", number of line: 202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern ";;", number of line: 7764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "when", number of line: 832
   8-11
      (when (or ed xp)

	 Pattern ";;", number of line: 7765
   1-2
;; ~[

	 Pattern ";;", number of line: 2739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "5", number of line: 3292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "when", number of line: 836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern ";;", number of line: 2741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "error", number of line: 2138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "%pi", number of line: 2741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "not correct", number of line: 2138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "thru", number of line: 3293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "list", number of line: 2742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 9598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "nil", number of line: 2742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "case of two", number of line: 2142
   14-24
   if n=2 /* case of two points */

	 Pattern "nil", number of line: 9600
   27-29
                          nil 

	 Pattern "case of two", number of line: 7142
   14-24
   if n=2 /* case of two points */

	 Pattern "nil", number of line: 9601
   27-29
                          nil ))) 

	 Pattern "+", number of line: 7143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "nil", number of line: 9603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "a)", number of line: 8363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 8363
   1-20
(in-package :maxima)

	 Pattern "thru", number of line: 7146
   20-23
      else for i:2 thru n do(

	 Pattern ";;", number of line: 8365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern ";;", number of line: 8366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "matrix", number of line: 4043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 4043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern ";;", number of line: 5848
   1-2
;;  

	 Pattern "a)", number of line: 4044
   17-18
   n: length(data),

	 Pattern "+", number of line: 2143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern ";;", number of line: 8367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 8368
   1-2
;;

	 Pattern "+", number of line: 7152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "thru", number of line: 2146
   20-23
      else for i:2 thru n do(

	 Pattern "start", number of line: 9605
   23-27
                      start pos2 )

	 Pattern "+", number of line: 7153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "when", number of line: 9606
   18-21
                (when loops 

	 Pattern "error", number of line: 2745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 2745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "nil", number of line: 9608
   31-33
                  (setq loops nil) )

	 Pattern "draw2d", number of line: 3294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern ";;", number of line: 9610
   1-2
;; ... or don't loop ...

	 Pattern ";;", number of line: 2747
   1-2
;; ~D

	 Pattern "error", number of line: 204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "+", number of line: 2152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "error", number of line: 206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "interpolation", number of line: 7160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern ";;", number of line: 8379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "+", number of line: 2153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "interpolation", number of line: 208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern ";;", number of line: 8380
   1-2
;;

	 Pattern "error", number of line: 8381
   16-20
(setq $stderr *error-output*

	 Pattern "5", number of line: 7161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "matrix", number of line: 7161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 7161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 7162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "case of two", number of line: 210
   14-24
   if n=2 /* case of two points */

	 Pattern "5", number of line: 7162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "list", number of line: 7163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "+", number of line: 211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern ";;", number of line: 6479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern ";;", number of line: 1479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "error", number of line: 5202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 5202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern ";;", number of line: 6482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "INTRODUCTION", number of line: 9020
   16-27
/*             INTRODUCTION

	 Pattern "error", number of line: 5204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern ";;", number of line: 1482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "not correct", number of line: 5204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "interpolation", number of line: 9022
   27-39
This package defines some interpolation techniques.

	 Pattern ";;", number of line: 6483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "nil", number of line: 6483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern ";;", number of line: 1483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "error", number of line: 5206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 5206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "nil", number of line: 1483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "start", number of line: 6485
   23-27
                (setq start pos2)

	 Pattern "interpolation", number of line: 5208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "start", number of line: 1485
   23-27
                (setq start pos2)

	 Pattern "stream", number of line: 8386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "interpolation", number of line: 2160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "@@@", number of line: 9027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "stream", number of line: 8388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "5", number of line: 2161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "nil", number of line: 8388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 8389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "matrix", number of line: 2161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 7165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "a)", number of line: 2161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "text", number of line: 8389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "list", number of line: 2162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 2162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "stream", number of line: 8390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "list", number of line: 2163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "list", number of line: 217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "error", number of line: 8392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "list", number of line: 218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "text", number of line: 8392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "nil", number of line: 8393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 8394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "a)", number of line: 2165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern ";;", number of line: 9613
   1-2
;; ... set the position in ctrls ...

	 Pattern ";;", number of line: 2751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "start", number of line: 9615
   15-19
        (setq start pos2)

	 Pattern ";;", number of line: 9616
   1-2
;; ... and take the next argument

	 Pattern ";;", number of line: 2753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 2753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 2754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 2754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 4598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "error", number of line: 2757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "lambda", number of line: 8394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "format", number of line: 8396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "stream", number of line: 8396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "nil", number of line: 8399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "start", number of line: 8400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "nil", number of line: 8402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "thru", number of line: 229
   12-15
   for i:2 thru n-1 do (

	 Pattern "+", number of line: 230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "list", number of line: 6488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "+", number of line: 231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "start", number of line: 8405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "text", number of line: 2757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "when", number of line: 8406
   12-15
          (when pos1

	 Pattern "+", number of line: 233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern ";;", number of line: 2759
   1-2
;; ~A, ~S

	 Pattern "[]", number of line: 8409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "+", number of line: 235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "load(interpol); ", number of line: 2176
   4-19
/* load(interpol);                                                                     */

	 Pattern ";;", number of line: 2762
   1-2
;; ~C

	 Pattern "error", number of line: 6489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 6489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "error", number of line: 4046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 4046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern ";;", number of line: 2764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "text", number of line: 6489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "nil", number of line: 4600
   27-29
                          nil 

	 Pattern "list", number of line: 4047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern ";;", number of line: 6490
   1-2
;; ~?

	 Pattern ";;", number of line: 2765
   1-2
;; ~[

	 Pattern "nil", number of line: 4601
   27-29
                          nil ))) 

	 Pattern "a)", number of line: 4047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 4047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 4048
   25-26
      then out: sort(data)

	 Pattern "nil", number of line: 4603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "matrix", number of line: 4049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 4049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern ";;", number of line: 5850
   1-2
;;

	 Pattern "+", number of line: 840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "a)", number of line: 4050
   30-31
      then out: sort(args(data))

	 Pattern ";;", number of line: 5851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "list", number of line: 4051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern ";;", number of line: 841
   1-2
;;  

	 Pattern "------------------------", number of line: 5851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "a)", number of line: 4051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern ";;", number of line: 6494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "start", number of line: 4605
   23-27
                      start pos2 )

	 Pattern "lambda", number of line: 4051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 4052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "when", number of line: 4606
   18-21
                (when loops 

	 Pattern "error", number of line: 4053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "+", number of line: 244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "nil", number of line: 4608
   31-33
                  (setq loops nil) )

	 Pattern "nil", number of line: 6497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern "thru", number of line: 4055
   12-15
   for i:2 thru n do

	 Pattern ";;", number of line: 8410
   5-6
")));; newline possible spec

	 Pattern ";;", number of line: 4610
   1-2
;; ... or don't loop ...

	 Pattern "newline", number of line: 8410
   8-14
")));; newline possible spec

	 Pattern "start", number of line: 9624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "nil", number of line: 9624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "error", number of line: 8412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "text", number of line: 8412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern ";;", number of line: 4613
   1-2
;; ... set the position in ctrls ...

	 Pattern ";;", number of line: 9627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "list", number of line: 9033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "for i in select do", number of line: 3304
   5-22
    for i in select do(

	 Pattern "start", number of line: 9628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern ";;", number of line: 8415
   1-2
;; recognize the directive:

	 Pattern "start", number of line: 8416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "5", number of line: 9035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "matrix", number of line: 9035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 9035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "load(interpol); ", number of line: 7176
   4-19
/* load(interpol);                                                                     */

	 Pattern "list", number of line: 9036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "5", number of line: 9036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "error", number of line: 3309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 3309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 7177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "list", number of line: 9037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "5", number of line: 7177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "kill", number of line: 5853
   2-5
(kill (all),

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 2177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "case of two", number of line: 5210
   14-24
   if n=2 /* case of two points */

	 Pattern "5", number of line: 2177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "+", number of line: 5211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern ";;", number of line: 2768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "when", number of line: 2768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "5", number of line: 2180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 2180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern ";;", number of line: 2772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 2773
   1-2
;; wd: nil or width

	 Pattern "nil", number of line: 2773
   8-10
;; wd: nil or width

	 Pattern ";;", number of line: 2774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "list", number of line: 5217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "draw2d", number of line: 2182
   4-9
/* draw2d(                                                                             */

	 Pattern "nil", number of line: 2774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 2775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "list", number of line: 5218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "list", number of line: 1488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "list", number of line: 5863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "nil", number of line: 2775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 7768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern ";;", number of line: 2776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 2776
   8-10
;; xp: nil or preferred exponent

	 Pattern "when", number of line: 7768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern ";;", number of line: 2777
   1-2
;; ov: nil or overflow character

	 Pattern "error", number of line: 1489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 1489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "nil", number of line: 2777
   8-10
;; ov: nil or overflow character

	 Pattern "5", number of line: 7180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 7180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "text", number of line: 1489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 848
   1-2
;;  

	 Pattern ";;", number of line: 1490
   1-2
;; ~?

	 Pattern ";;", number of line: 7772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 7773
   1-2
;; wd: nil or width

	 Pattern ";;", number of line: 850
   1-2
;;

	 Pattern "nil", number of line: 7773
   8-10
;; wd: nil or width

	 Pattern ";;", number of line: 851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern ";;", number of line: 7774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "------------------------", number of line: 851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "nil", number of line: 7774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern "thru", number of line: 247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern ";;", number of line: 7775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 1494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "nil", number of line: 7775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern "+", number of line: 248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "kill", number of line: 853
   2-5
(kill (all),

	 Pattern ";;", number of line: 7776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 7776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 7777
   1-2
;; ov: nil or overflow character

	 Pattern "error", number of line: 4057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "nil", number of line: 7777
   8-10
;; ov: nil or overflow character

	 Pattern "thru", number of line: 251
   12-15
   for j:2 thru n do (

	 Pattern "start", number of line: 4615
   15-19
        (setq start pos2)

	 Pattern ";;", number of line: 4616
   1-2
;; ... and take the next argument

	 Pattern "interpolation", number of line: 4062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "error", number of line: 6506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "5", number of line: 4063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "start", number of line: 8420
   21-25
              (setq start 0 

	 Pattern "matrix", number of line: 4063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 4063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "text", number of line: 6506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "start", number of line: 8421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "list", number of line: 4064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern ";;", number of line: 6507
   1-2
;; ~^

	 Pattern "5", number of line: 4064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 4065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "start", number of line: 4624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "when", number of line: 6509
   14-17
            (when (search "@" params)

	 Pattern "draw2d", number of line: 7182
   4-9
/* draw2d(                                                                             */

	 Pattern "error", number of line: 6510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern ";;", number of line: 2778
   1-2
;; pc: nil or padding character

	 Pattern "nil", number of line: 2778
   8-10
;; pc: nil or padding character

	 Pattern "nil", number of line: 1497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern ";;", number of line: 2779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 2779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 2779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 2780
   1-2
;;

	 Pattern ";;", number of line: 2781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern "start", number of line: 8427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern ";;", number of line: 2782
   1-2
;;

	 Pattern ";;", number of line: 2783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern "thru", number of line: 5864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 5865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 5865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern ";;", number of line: 2784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "interpol_check_input(data,funame):=", number of line: 9040
   1-35
interpol_check_input(data,funame):=

	 Pattern "r > n-1 or r < 0", number of line: 3313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "error", number of line: 3314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "list", number of line: 9042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 9042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 9042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "list", number of line: 9043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 9043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 9043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 9043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "a)", number of line: 9044
   17-18
   n: length(data),

	 Pattern "matrix", number of line: 3317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "error", number of line: 9046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "matrix", number of line: 3318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 3319
   21-24
                makelist(block([x,y],

	 Pattern "Argument to", number of line: 9046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "draw2d", number of line: 2188
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 9047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern ";;", number of line: 2786
   1-2
;;

	 Pattern ";;", number of line: 2787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "list", number of line: 5869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "error", number of line: 1506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "start", number of line: 9636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "thru", number of line: 5870
   15-18
    for j : 0 thru n - 1

	 Pattern "text", number of line: 1506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "+", number of line: 5871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "start", number of line: 9637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern ";;", number of line: 1507
   1-2
;; ~^

	 Pattern "%pi", number of line: 5871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "when", number of line: 8427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 8428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "start", number of line: 9638
   13-17
      (setq start pos2  

	 Pattern ";;", number of line: 8429
   1-2
;;

	 Pattern "start", number of line: 9639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "when", number of line: 1509
   14-17
            (when (search "@" params)

	 Pattern ";;", number of line: 8430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "error", number of line: 1510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern ";;", number of line: 2792
   1-2
;;    

	 Pattern ";;", number of line: 8431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 8431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "text", number of line: 1510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "when", number of line: 8431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "text", number of line: 6510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "nil", number of line: 4624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "when", number of line: 8432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "when", number of line: 6511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern ";;", number of line: 4627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 8434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "a)", number of line: 4067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "start", number of line: 4628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "when", number of line: 8434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "aj", number of line: 259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern ";;", number of line: 7778
   1-2
;; pc: nil or padding character

	 Pattern "list", number of line: 863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "nil", number of line: 7778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 7779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 7779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "thru", number of line: 864
   15-18
    for k : 0 thru n - 1

	 Pattern "nil", number of line: 7779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 7780
   1-2
;;

	 Pattern "+", number of line: 865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern ";;", number of line: 7781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern "thru", number of line: 5229
   12-15
   for i:2 thru n-1 do (

	 Pattern ";;", number of line: 7782
   1-2
;;

	 Pattern "list", number of line: 3322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "+", number of line: 5230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern ";;", number of line: 7783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern "+", number of line: 5231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "list", number of line: 3324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern ";;", number of line: 7784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "+", number of line: 5233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "list", number of line: 3326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern ";;", number of line: 7786
   1-2
;;

	 Pattern "+", number of line: 3326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "a)", number of line: 9047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 9047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 9048
   25-26
      then out: sort(data)

	 Pattern "draw2d", number of line: 7188
   4-9
/* draw2d(                                                                             */

	 Pattern "aj", number of line: 262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "matrix", number of line: 9049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 9049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "load(interpol); ", number of line: 4071
   4-19
/* load(interpol);                                                             */

	 Pattern "a)", number of line: 9050
   30-31
      then out: sort(args(data))

	 Pattern "when", number of line: 1511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "list", number of line: 9051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "a)", number of line: 9051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 9051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 9052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "error", number of line: 9053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "+", number of line: 9643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "[]", number of line: 9644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "aj", number of line: 7193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "+", number of line: 9644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "aj", number of line: 2193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern ";;", number of line: 9645
   4-5
") ;;  newline possible spec

	 Pattern "start", number of line: 1518
   19-23
            (setq start pos2)

	 Pattern "newline", number of line: 9645
   8-14
") ;;  newline possible spec

	 Pattern ";;", number of line: 2798
   1-2
;;  

	 Pattern "+", number of line: 9647
   17-17
      (return (1+ p)) )))

	 Pattern ";;", number of line: 9650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "lambda", number of line: 5880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "+", number of line: 8435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "start", number of line: 6518
   19-23
            (setq start pos2)

	 Pattern ";;", number of line: 9651
   1-2
;;

	 Pattern "thru", number of line: 9055
   12-15
   for i:2 thru n do

	 Pattern "+", number of line: 8438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern ";;", number of line: 1520
   1-2
;; ~:P and ~:@P

	 Pattern "error", number of line: 9057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern ";;", number of line: 1521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "start", number of line: 1522
   20-24
             (setq start pos2)

	 Pattern "for i in select do", number of line: 7197
   4-21
   for i in select do(

	 Pattern ";;", number of line: 1524
   1-2
;; default part:

	 Pattern "interpolation", number of line: 9062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern ";;", number of line: 1525
   1-2
;;

	 Pattern ";;", number of line: 1526
   1-2
;; loop ... 

	 Pattern "5", number of line: 9063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 9063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 9063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "for i in select do", number of line: 2197
   4-21
   for i in select do(

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 4072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "+", number of line: 5235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern ";;", number of line: 1529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "5", number of line: 4072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "+", number of line: 265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "aj", number of line: 266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "5", number of line: 4075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 4075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "error", number of line: 2202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "interpolation", number of line: 271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "draw2d", number of line: 4077
   4-9
/* draw2d(                                                                     */

	 Pattern "list", number of line: 3328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 3329
   10-13
    lov: listofvars(sol),

	 Pattern ";;", number of line: 7787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "list", number of line: 3330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "list", number of line: 3331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "lambda", number of line: 3331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "start", number of line: 4636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "list", number of line: 3332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "thru", number of line: 870
   15-18
    for j : 0 thru n - 1

	 Pattern "+", number of line: 3332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "list", number of line: 3333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "start", number of line: 4637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "%pi", number of line: 871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "+", number of line: 9655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "not correct", number of line: 2202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "error", number of line: 7202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 7202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern ";;", number of line: 7792
   1-2
;;    

	 Pattern "error", number of line: 2204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 2204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "error", number of line: 7204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 7204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "+", number of line: 9657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "error", number of line: 7206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 7206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "+", number of line: 2805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "interpolation", number of line: 7208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "+", number of line: 9659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "nil", number of line: 2805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "+", number of line: 3333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "when", number of line: 8446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "start", number of line: 4638
   13-17
      (setq start pos2  

	 Pattern "error", number of line: 8447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 6520
   1-2
;; ~:P and ~:@P

	 Pattern ";;", number of line: 3335
   1-2
;;

	 Pattern "start", number of line: 4639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "text", number of line: 8447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 6521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern ";;", number of line: 8448
   1-2
;;

	 Pattern ";;", number of line: 3336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 3336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern ";;", number of line: 8449
   1-2
;; handle some special directives:

	 Pattern "start", number of line: 6522
   20-24
             (setq start pos2)

	 Pattern ";;", number of line: 3337
   1-2
;;

	 Pattern "list", number of line: 9064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern ";;", number of line: 3338
   1-2
;; Formatted printing to character streams

	 Pattern "5", number of line: 9064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "stream", number of line: 3338
   36-41
;; Formatted printing to character streams

	 Pattern "error", number of line: 2206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 3339
   1-2
;;

	 Pattern "not correct", number of line: 2206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 6524
   1-2
;; default part:

	 Pattern "list", number of line: 9065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern ";;", number of line: 3340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 3340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 6525
   1-2
;;

	 Pattern "interpolation", number of line: 2208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern ";;", number of line: 6526
   1-2
;; loop ... 

	 Pattern ";;", number of line: 3341
   1-2
;; Licence       : GPL2

	 Pattern ";;", number of line: 3342
   1-2
;;

	 Pattern "case of two", number of line: 2210
   14-24
   if n=2 /* case of two points */

	 Pattern "+", number of line: 5244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "a)", number of line: 9067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "+", number of line: 273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "lambda", number of line: 5886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "thru", number of line: 5247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "+", number of line: 5248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "------------------------", number of line: 275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "+", number of line: 277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "thru", number of line: 5251
   12-15
   for j:2 thru n do (

	 Pattern ";;", number of line: 7798
   1-2
;;  

	 Pattern "nil", number of line: 2808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "+", number of line: 2809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "+", number of line: 2810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern ";;", number of line: 9662
   1-2
;;  helper for ~v,#,vH

	 Pattern ";;", number of line: 9663
   1-2
;;

	 Pattern "+", number of line: 1533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern ";;", number of line: 8451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "+", number of line: 4643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "[]", number of line: 4644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "+", number of line: 4644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "+", number of line: 9666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern ";;", number of line: 4645
   4-5
") ;;  newline possible spec

	 Pattern "newline", number of line: 4645
   8-14
") ;;  newline possible spec

	 Pattern "when", number of line: 8453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "nil", number of line: 9667
   20-22
        ((= p len) nil)

	 Pattern ";;", number of line: 3343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "+", number of line: 9668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "+", number of line: 4647
   17-17
      (return (1+ p)) )))

	 Pattern ";;", number of line: 3344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 3344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 3345
   1-2
;;

	 Pattern ";;", number of line: 4650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern ";;", number of line: 4651
   1-2
;;

	 Pattern "+", number of line: 7805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 7805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "+", number of line: 1540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "for i in select do", number of line: 4085
   4-21
   for i in select do(

	 Pattern "nil", number of line: 7808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "+", number of line: 2211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "+", number of line: 7809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "lambda", number of line: 880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "load(interpol); ", number of line: 9071
   4-19
/* load(interpol);                                                             */

	 Pattern "when", number of line: 2817
   12-15
          (when (= len 0) (incf len))

	 Pattern "+", number of line: 7810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 9072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "lambda", number of line: 5895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 2217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "5", number of line: 9072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 2218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "aj", number of line: 5259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern ";;", number of line: 9673
   1-2
;;  find positions of matching braces

	 Pattern "+", number of line: 4655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern ";;", number of line: 9674
   1-2
;;

	 Pattern "format", number of line: 3349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "start", number of line: 9675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "+", number of line: 4657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "start", number of line: 9676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 9676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "when", number of line: 7817
   12-15
          (when (= len 0) (incf len))

	 Pattern "+", number of line: 4659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "list", number of line: 9679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 9679
   26-30
        ((zerop n) (list start end))

	 Pattern ";;", number of line: 6529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "case of two", number of line: 7210
   14-24
   if n=2 /* case of two points */

	 Pattern ";;", number of line: 8461
   1-2
;; ~v,#,vH

	 Pattern "+", number of line: 7211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "when", number of line: 8463
   14-17
            (when (check-v# params)

	 Pattern "+", number of line: 6533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "lambda", number of line: 5901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "format", number of line: 3353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "list", number of line: 7217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "list", number of line: 7218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "5", number of line: 282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "error", number of line: 4090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "list", number of line: 283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "not correct", number of line: 4090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "+", number of line: 2823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "thru", number of line: 4094
   12-15
   for i:1 thru n do(

	 Pattern ";;", number of line: 2825
   1-2
;;  

	 Pattern "+", number of line: 5910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "kill", number of line: 5913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "+", number of line: 6540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "list", number of line: 5916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "lambda", number of line: 886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "start", number of line: 9680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "list", number of line: 8466
   20-23
                (dolist (p prms)

	 Pattern ";;", number of line: 4662
   1-2
;;  helper for ~v,#,vH

	 Pattern ";;", number of line: 4663
   1-2
;;

	 Pattern "+", number of line: 4666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "when", number of line: 9683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "when", number of line: 9684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "nil", number of line: 4667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 4668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "thru", number of line: 4096
   15-18
      for k:1 thru n do

	 Pattern "a)", number of line: 286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "aj", number of line: 5262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "+", number of line: 4098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "+", number of line: 5265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "aj", number of line: 5266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 5266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "5", number of line: 9075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 9075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "+", number of line: 2830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 1554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "when", number of line: 2830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 2831
   1-2
;;  

	 Pattern "draw2d", number of line: 9077
   4-9
/* draw2d(                                                                     */

	 Pattern "when", number of line: 2832
   8-11
      (when (or ed xp)

	 Pattern "+", number of line: 7823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern ";;", number of line: 7825
   1-2
;;  

	 Pattern "interpolation", number of line: 5271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "+", number of line: 9689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 9689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern ";;", number of line: 4673
   1-2
;;  find positions of matching braces

	 Pattern ";;", number of line: 4674
   1-2
;;

	 Pattern "+", number of line: 5273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "+", number of line: 9692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "start", number of line: 4675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "start", number of line: 4676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 4676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "------------------------", number of line: 5275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern ";;", number of line: 8479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "list", number of line: 4679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 4679
   26-30
        ((zerop n) (list start end))

	 Pattern "+", number of line: 9696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "thru", number of line: 7229
   12-15
   for i:2 thru n-1 do (

	 Pattern "5", number of line: 292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "+", number of line: 7230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "+", number of line: 7231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "thru", number of line: 293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "draw2d", number of line: 294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "+", number of line: 7233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "+", number of line: 7235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "thru", number of line: 2229
   12-15
   for i:2 thru n-1 do (

	 Pattern "+", number of line: 2230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "when", number of line: 2836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "+", number of line: 5277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "interpolation", number of line: 4110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern " Linear interpolation. The argument must be either:", number of line: 4110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "+", number of line: 2840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "5", number of line: 4111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 4111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 4111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern ";;", number of line: 2841
   1-2
;;  

	 Pattern "list", number of line: 4112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "for i in select do", number of line: 9085
   4-21
   for i in select do(

	 Pattern "5", number of line: 4112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 4113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "5", number of line: 5282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 3363
   19-20
(in-package :maxima)

	 Pattern "matrix", number of line: 5282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "(in-package :maxima)", number of line: 3363
   1-20
(in-package :maxima)

	 Pattern "list", number of line: 5919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 3365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "kill", number of line: 5919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "nil", number of line: 1559
   29-31
                      loops nil )

	 Pattern ";;", number of line: 3366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "nil", number of line: 1560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern ";;", number of line: 3367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 3368
   1-2
;;

	 Pattern "[]", number of line: 5924
   6-7
fft ([]);

	 Pattern "lambda", number of line: 895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "[]", number of line: 5925
   1-2
[];

	 Pattern "[]", number of line: 5927
   8-9
bf_fft([]);

	 Pattern "nil", number of line: 1564
   29-31
                      loops nil )

	 Pattern ";;", number of line: 8482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "[]", number of line: 5928
   1-2
[];

	 Pattern "+", number of line: 7830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 8483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "when", number of line: 7830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern "nil", number of line: 8483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern ";;", number of line: 7831
   1-2
;;  

	 Pattern "start", number of line: 4680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "start", number of line: 8485
   23-27
                (setq start pos2)

	 Pattern "when", number of line: 7832
   8-11
      (when (or ed xp)

	 Pattern "+", number of line: 2231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "list", number of line: 8488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "+", number of line: 9701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "+", number of line: 2233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "nil", number of line: 9702
   9-11
        nil )

	 Pattern "+", number of line: 2235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "+", number of line: 9704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "when", number of line: 4683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "for i in select do", number of line: 304
   5-22
    for i in select do(

	 Pattern "when", number of line: 4684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern ";;", number of line: 2848
   1-2
;;  

	 Pattern "a)", number of line: 4115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "nil", number of line: 1565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "error", number of line: 9090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 9090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 2850
   1-2
;;

	 Pattern ";;", number of line: 2851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "------------------------", number of line: 2851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "kill", number of line: 2853
   2-5
(kill (all),

	 Pattern "thru", number of line: 9094
   12-15
   for i:1 thru n do(

	 Pattern "load(interpol); ", number of line: 4119
   4-19
/* load(interpol);                                                             */

	 Pattern "a)", number of line: 5282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 5283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 5283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "lambda", number of line: 901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 5284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 4120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "thru", number of line: 9096
   15-18
      for k:1 thru n do

	 Pattern "5", number of line: 4120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "+", number of line: 4689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 4689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "+", number of line: 9098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "when", number of line: 7836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "list", number of line: 2863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "+", number of line: 2244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "+", number of line: 4692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "+", number of line: 7840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern ";;", number of line: 7841
   1-2
;;  

	 Pattern ";;", number of line: 6554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "error", number of line: 309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "+", number of line: 4696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "error", number of line: 8489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 8489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "text", number of line: 8489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 8490
   1-2
;; ~?

	 Pattern "+", number of line: 7244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "a)", number of line: 5286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 1575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "5", number of line: 4123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 4123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "thru", number of line: 7247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "draw2d", number of line: 4125
   4-9
/* draw2d(                                                                     */

	 Pattern "+", number of line: 7248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "nil", number of line: 1577
   27-29
                          nil 

	 Pattern "nil", number of line: 1578
   27-29
                          nil )))

	 Pattern "nil", number of line: 1580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern ";;", number of line: 9709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "nil", number of line: 6559
   29-31
                      loops nil )

	 Pattern "+", number of line: 4701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "nil", number of line: 6560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern ";;", number of line: 8494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "nil", number of line: 4702
   9-11
        nil )

	 Pattern ";;", number of line: 9713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern ";;", number of line: 3379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "+", number of line: 4704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern ";;", number of line: 3380
   1-2
;;

	 Pattern "error", number of line: 3381
   16-20
(setq $stderr *error-output*

	 Pattern "5", number of line: 5936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "thru", number of line: 2247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "thru", number of line: 2864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 2248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "+", number of line: 2865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 2865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern ";;", number of line: 7848
   1-2
;;  

	 Pattern "+", number of line: 910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "thru", number of line: 2251
   12-15
   for j:2 thru n do (

	 Pattern ";;", number of line: 7850
   1-2
;;

	 Pattern ";;", number of line: 7851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "kill", number of line: 913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "interpolation", number of line: 9110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern "------------------------", number of line: 7851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern " Linear interpolation. The argument must be either:", number of line: 9110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "kill", number of line: 7853
   2-5
(kill (all),

	 Pattern "start", number of line: 1582
   23-27
                      start pos2 )

	 Pattern "thru", number of line: 7251
   12-15
   for j:2 thru n do (

	 Pattern "when", number of line: 1583
   18-21
                (when loops 

	 Pattern "nil", number of line: 8497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern ";;", number of line: 4709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "nil", number of line: 1585
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 4713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern ";;", number of line: 4715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "r > n-1 or r < 0", number of line: 313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "list", number of line: 916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "5", number of line: 9111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "%pi", number of line: 4715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "error", number of line: 314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "list", number of line: 4716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 4716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "error", number of line: 8506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "text", number of line: 8506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 8507
   1-2
;; ~^

	 Pattern "matrix", number of line: 317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "error", number of line: 4719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 4719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "matrix", number of line: 318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 319
   21-24
                makelist(block([x,y],

	 Pattern "when", number of line: 8509
   14-17
            (when (search "@" params)

	 Pattern "error", number of line: 8510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "text", number of line: 8510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "list", number of line: 1598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "5", number of line: 5292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "5", number of line: 5939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "matrix", number of line: 9111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 9111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "stream", number of line: 3386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "5", number of line: 5942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "stream", number of line: 3388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 3388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "list", number of line: 2869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "error", number of line: 3389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "text", number of line: 3389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "thru", number of line: 5293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "draw2d", number of line: 5294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "nil", number of line: 6564
   29-31
                      loops nil )

	 Pattern "list", number of line: 919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "aj", number of line: 2259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "nil", number of line: 6565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern ";;", number of line: 9715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "for i in select do", number of line: 4133
   4-21
   for i in select do(

	 Pattern "%pi", number of line: 9715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 9716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 9716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "aj", number of line: 2262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "error", number of line: 9719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 9719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "[]", number of line: 924
   6-7
fft ([]);

	 Pattern "[]", number of line: 925
   1-2
[];

	 Pattern "5", number of line: 5945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "list", number of line: 7863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "thru", number of line: 2870
   15-18
    for j : 0 thru n - 1

	 Pattern "5", number of line: 5948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "when", number of line: 8511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "+", number of line: 2871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 2871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "list", number of line: 9112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 9112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "+", number of line: 2265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "list", number of line: 324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "aj", number of line: 2266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 2266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "list", number of line: 6575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "error", number of line: 4138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "list", number of line: 326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "not correct", number of line: 4138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "+", number of line: 326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "interpolation", number of line: 2271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "list", number of line: 328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 329
   10-13
    lov: listofvars(sol),

	 Pattern "case of two", number of line: 4142
   14-24
   if n=2 /* case of two points */

	 Pattern "list", number of line: 9113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "[]", number of line: 927
   8-9
bf_fft([]);

	 Pattern "stream", number of line: 3390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "[]", number of line: 928
   1-2
[];

	 Pattern "thru", number of line: 7864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 7865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "error", number of line: 3392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "%pi", number of line: 7865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "text", number of line: 3392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "a)", number of line: 9115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "nil", number of line: 3393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 3394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "lambda", number of line: 3394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "list", number of line: 7869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "format", number of line: 3396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "thru", number of line: 7870
   15-18
    for j : 0 thru n - 1

	 Pattern "stream", number of line: 3396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "+", number of line: 7871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 7871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "5", number of line: 936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "aj", number of line: 7259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "for i in select do", number of line: 5304
   5-22
    for i in select do(

	 Pattern "aj", number of line: 7262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "start", number of line: 8518
   19-23
            (setq start pos2)

	 Pattern "+", number of line: 7265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "nil", number of line: 1600
   27-29
                          nil 

	 Pattern ";;", number of line: 8520
   1-2
;; ~:P and ~:@P

	 Pattern "aj", number of line: 7266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 7266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "nil", number of line: 1601
   27-29
                          nil ))) 

	 Pattern ";;", number of line: 8521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "start", number of line: 8522
   20-24
             (setq start pos2)

	 Pattern "5", number of line: 939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "interpolation", number of line: 7271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern ";;", number of line: 8524
   1-2
;; default part:

	 Pattern ";;", number of line: 8525
   1-2
;;

	 Pattern "5", number of line: 942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 8526
   1-2
;; loop ... 

	 Pattern "+", number of line: 7273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "5", number of line: 945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 8529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern ";;", number of line: 9735
   1-2
;; ~E, ~F, ~G

	 Pattern "5", number of line: 5951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "error", number of line: 5309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 5309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "%pi", number of line: 5954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "nil", number of line: 6577
   27-29
                          nil 

	 Pattern "lambda", number of line: 2880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "nil", number of line: 3399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "nil", number of line: 1603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "start", number of line: 3400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "%pi", number of line: 5957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "start", number of line: 1605
   23-27
                      start pos2 )

	 Pattern "nil", number of line: 6578
   27-29
                          nil )))

	 Pattern "list", number of line: 330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "+", number of line: 2273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "list", number of line: 331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "load(interpol); ", number of line: 9119
   4-19
/* load(interpol);                                                             */

	 Pattern "nil", number of line: 6580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "lambda", number of line: 331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 9120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "start", number of line: 6582
   23-27
                      start pos2 )

	 Pattern "------------------------", number of line: 2275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "5", number of line: 9120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "+", number of line: 333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "when", number of line: 6583
   18-21
                (when loops 

	 Pattern ";;", number of line: 335
   1-2
;;

	 Pattern "+", number of line: 2277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern ";;", number of line: 336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "nil", number of line: 6585
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 337
   1-2
;;

	 Pattern "5", number of line: 9123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 9123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "+", number of line: 4143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "------------------------", number of line: 7275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "when", number of line: 1606
   18-21
                (when loops 

	 Pattern ";;", number of line: 9739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "list", number of line: 5963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "nil", number of line: 1608
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 1610
   1-2
;; ... or don't loop ...

	 Pattern ";;", number of line: 9741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "lambda", number of line: 2886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "%pi", number of line: 9741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 9742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 9742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 5966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern ";;", number of line: 1613
   1-2
;; ... set the position in ctrls ...

	 Pattern "list", number of line: 5969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "nil", number of line: 3402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "+", number of line: 8533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern ";;", number of line: 4735
   1-2
;; ~E, ~F, ~G

	 Pattern "start", number of line: 3405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 7277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "when", number of line: 3406
   12-15
          (when pos1

	 Pattern ";;", number of line: 4739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "draw2d", number of line: 9125
   4-9
/* draw2d(                                                                     */

	 Pattern "[]", number of line: 3409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "lambda", number of line: 7880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "5", number of line: 2282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 2282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 2282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 2283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 2283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 2284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "5", number of line: 948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern ";;", number of line: 338
   1-2
;; Formatted printing to character streams

	 Pattern "error", number of line: 9745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "r > n-1 or r < 0", number of line: 5313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "stream", number of line: 338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 339
   1-2
;;

	 Pattern "start", number of line: 1615
   15-19
        (setq start pos2)

	 Pattern "error", number of line: 5314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "text", number of line: 9745
   33-36
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 1616
   1-2
;; ... and take the next argument

	 Pattern ";;", number of line: 341
   1-2
;; Licence       : GPL2

	 Pattern ";;", number of line: 9747
   1-2
;; ~D

	 Pattern ";;", number of line: 342
   1-2
;;

	 Pattern ";;", number of line: 343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "matrix", number of line: 5317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern ";;", number of line: 344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "matrix", number of line: 5318
   17-22
    coef: apply(matrix,

	 Pattern "stringproc.texi ", number of line: 344
   20-35
;; Documentation : stringproc.texi 

	 Pattern "list", number of line: 5319
   21-24
                makelist(block([x,y],

	 Pattern ";;", number of line: 345
   1-2
;;

	 Pattern ";;", number of line: 9751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "5", number of line: 7282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 7282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 7282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "lambda", number of line: 2895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 7283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 7283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 7284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "for i in select do", number of line: 9133
   4-21
   for i in select do(

	 Pattern "lambda", number of line: 7886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "a)", number of line: 7286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 5972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "thru", number of line: 4146
   20-23
      else for i:2 thru n do(

	 Pattern "5", number of line: 951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "list", number of line: 5975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "+", number of line: 8540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern ";;", number of line: 3410
   5-6
")));; newline possible spec

	 Pattern "newline", number of line: 3410
   8-14
")));; newline possible spec

	 Pattern "error", number of line: 3412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "a)", number of line: 2286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 5978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "text", number of line: 3412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "%pi", number of line: 954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 3415
   1-2
;; recognize the directive:

	 Pattern ";;", number of line: 4741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "start", number of line: 3416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "%pi", number of line: 4741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "start", number of line: 1624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "list", number of line: 4742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 1624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "nil", number of line: 4742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 1627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "format", number of line: 349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "start", number of line: 1628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "error", number of line: 4745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 4745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 5322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern ";;", number of line: 4747
   1-2
;; ~D

	 Pattern ";;", number of line: 9753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 5324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "%pi", number of line: 9753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "format", number of line: 353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "list", number of line: 9754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 9754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 5326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "+", number of line: 5326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "lambda", number of line: 2901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "error", number of line: 9757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 5328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "text", number of line: 9757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 5329
   10-13
    lov: listofvars(sol),

	 Pattern ";;", number of line: 9759
   1-2
;; ~A, ~S

	 Pattern "error", number of line: 9138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 9138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "lambda", number of line: 7895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "+", number of line: 2910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "case of two", number of line: 9142
   14-24
   if n=2 /* case of two points */

	 Pattern "5", number of line: 7292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "+", number of line: 9143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "+", number of line: 4152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "list", number of line: 6598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "thru", number of line: 7293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern ";;", number of line: 9762
   1-2
;; ~C

	 Pattern "kill", number of line: 2913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "nil", number of line: 6600
   27-29
                          nil 

	 Pattern ";;", number of line: 9764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "lambda", number of line: 7901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 2916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "nil", number of line: 6601
   27-29
                          nil ))) 

	 Pattern ";;", number of line: 9765
   1-2
;; ~[

	 Pattern "list", number of line: 5330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "list", number of line: 2919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 2919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "list", number of line: 5331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "lambda", number of line: 5331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 5332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern ";;", number of line: 9768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "+", number of line: 5332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "start", number of line: 1636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "when", number of line: 9768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "list", number of line: 5333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "+", number of line: 5333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "start", number of line: 1637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern ";;", number of line: 5335
   1-2
;;

	 Pattern "start", number of line: 1638
   13-17
      (setq start pos2  

	 Pattern ";;", number of line: 5336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 5336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "start", number of line: 1639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern ";;", number of line: 5337
   1-2
;;

	 Pattern ";;", number of line: 4751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "start", number of line: 3420
   21-25
              (setq start 0 

	 Pattern ";;", number of line: 4753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 4753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "a)", number of line: 363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 363
   1-20
(in-package :maxima)

	 Pattern "start", number of line: 3421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "list", number of line: 4754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "nil", number of line: 4754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "5", number of line: 2292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "list", number of line: 966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "thru", number of line: 2293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "draw2d", number of line: 2294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "start", number of line: 3427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "list", number of line: 5981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "+", number of line: 4153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "list", number of line: 5984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "list", number of line: 5987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "interpolation", number of line: 4160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "draw2d", number of line: 7294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "list", number of line: 5990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "thru", number of line: 9146
   20-23
      else for i:2 thru n do(

	 Pattern "list", number of line: 5993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 5993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "for i in select do", number of line: 2304
   5-22
    for i in select do(

	 Pattern "nil", number of line: 6603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "list", number of line: 5996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 5996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "start", number of line: 6605
   23-27
                      start pos2 )

	 Pattern "list", number of line: 5999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "when", number of line: 6606
   18-21
                (when loops 

	 Pattern "+", number of line: 9152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "+", number of line: 7910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "5", number of line: 4161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "matrix", number of line: 4161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 4161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "+", number of line: 9153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "nil", number of line: 6608
   31-33
                  (setq loops nil) )

	 Pattern "list", number of line: 4162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 4162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "[]", number of line: 2924
   6-7
fft ([]);

	 Pattern "kill", number of line: 7913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern ";;", number of line: 6610
   1-2
;; ... or don't loop ...

	 Pattern "[]", number of line: 2925
   1-2
[];

	 Pattern "list", number of line: 4163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "[]", number of line: 2927
   8-9
bf_fft([]);

	 Pattern ";;", number of line: 5338
   1-2
;; Formatted printing to character streams

	 Pattern "list", number of line: 7916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "stream", number of line: 5338
   36-41
;; Formatted printing to character streams

	 Pattern "[]", number of line: 2928
   1-2
[];

	 Pattern ";;", number of line: 5339
   1-2
;;

	 Pattern ";;", number of line: 366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern ";;", number of line: 5340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 5340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 5341
   1-2
;; Licence       : GPL2

	 Pattern "list", number of line: 7919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 7919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 5342
   1-2
;;

	 Pattern ";;", number of line: 368
   1-2
;;

	 Pattern ";;", number of line: 5343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "list", number of line: 969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern ";;", number of line: 5344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 5344
   20-35
;; Documentation : stringproc.texi 

	 Pattern "5", number of line: 2936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "error", number of line: 4757
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 9772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 9773
   1-2
;; wd: nil or width

	 Pattern "nil", number of line: 9773
   8-10
;; wd: nil or width

	 Pattern "for i in select do", number of line: 7304
   5-22
    for i in select do(

	 Pattern ";;", number of line: 9774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "interpolation", number of line: 9160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "nil", number of line: 9774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 9775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "nil", number of line: 9775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern "5", number of line: 9161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern ";;", number of line: 9776
   1-2
;; xp: nil or preferred exponent

	 Pattern "error", number of line: 2309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "matrix", number of line: 9161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "a)", number of line: 9161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "not correct", number of line: 2309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "nil", number of line: 9776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 9777
   1-2
;; ov: nil or overflow character

	 Pattern "list", number of line: 9162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 9162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "nil", number of line: 9777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 8554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern ";;", number of line: 9778
   1-2
;; pc: nil or padding character

	 Pattern "when", number of line: 3427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 3428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "+", number of line: 1643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "5", number of line: 2939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern ";;", number of line: 3429
   1-2
;;

	 Pattern ";;", number of line: 3430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "[]", number of line: 1644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "+", number of line: 1644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 3431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 3431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern ";;", number of line: 1645
   4-5
") ;;  newline possible spec

	 Pattern "5", number of line: 2942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "when", number of line: 3431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "newline", number of line: 1645
   8-14
") ;;  newline possible spec

	 Pattern ";;", number of line: 379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "when", number of line: 3432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern ";;", number of line: 380
   1-2
;;

	 Pattern "+", number of line: 1647
   17-17
      (return (1+ p)) )))

	 Pattern "text", number of line: 4757
   33-36
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 6613
   1-2
;; ... set the position in ctrls ...

	 Pattern "error", number of line: 381
   16-20
(setq $stderr *error-output*

	 Pattern ";;", number of line: 3434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "[]", number of line: 7924
   6-7
fft ([]);

	 Pattern "list", number of line: 972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "[]", number of line: 7925
   1-2
[];

	 Pattern "when", number of line: 3434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "start", number of line: 6615
   15-19
        (setq start pos2)

	 Pattern "kill", number of line: 6000
   2-5
 kill (aabb)...

	 Pattern "a)", number of line: 4165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "list", number of line: 975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "5", number of line: 6003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "list", number of line: 9163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "program", number of line: 6005
   6-12
This program is free software; you can redistribute

	 Pattern ";;", number of line: 4759
   1-2
;; ~A, ~S

	 Pattern "list", number of line: 978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "nil", number of line: 8559
   29-31
                      loops nil )

	 Pattern ";;", number of line: 1650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern ";;", number of line: 1651
   1-2
;;

	 Pattern "list", number of line: 981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern ";;", number of line: 5345
   1-2
;;

	 Pattern ";;", number of line: 4762
   1-2
;; ~C

	 Pattern "nil", number of line: 8560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "a)", number of line: 9165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "nil", number of line: 9778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 4764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern ";;", number of line: 9779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "format", number of line: 5349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "+", number of line: 9779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 9779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 4765
   1-2
;; ~[

	 Pattern ";;", number of line: 9780
   1-2
;;

	 Pattern ";;", number of line: 9781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern "[]", number of line: 7927
   8-9
bf_fft([]);

	 Pattern "[]", number of line: 7928
   1-2
[];

	 Pattern "5", number of line: 2945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 9782
   1-2
;;

	 Pattern "format", number of line: 5353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern ";;", number of line: 9783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 6616
   1-2
;; ... and take the next argument

	 Pattern "5", number of line: 2948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern ";;", number of line: 9784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "r > n-1 or r < 0", number of line: 2313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "5", number of line: 7936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "error", number of line: 2314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern ";;", number of line: 9786
   1-2
;;

	 Pattern "5", number of line: 7939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "error", number of line: 7309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 7309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "matrix", number of line: 2317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "5", number of line: 2951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "matrix", number of line: 2318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 2319
   21-24
                makelist(block([x,y],

	 Pattern "%pi", number of line: 2954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 9787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "start", number of line: 6624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "5", number of line: 7942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "stream", number of line: 386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "stream", number of line: 388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "5", number of line: 7945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern "text", number of line: 389
   27-30
      (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 9792
   1-2
;;    

	 Pattern "stream", number of line: 390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "5", number of line: 7948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "nil", number of line: 6624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern ";;", number of line: 6627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "+", number of line: 3435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "start", number of line: 6628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "list", number of line: 2322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern ";;", number of line: 4768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "when", number of line: 4768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "+", number of line: 3438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "program", number of line: 6011
   6-12
This program is distributed in the hope that it

	 Pattern ";;", number of line: 4772
   1-2
;; bf: bigfloat

	 Pattern "load(interpol); ", number of line: 4176
   4-19
/* load(interpol);                                                                     */

	 Pattern ";;", number of line: 4773
   1-2
;; wd: nil or width

	 Pattern "nil", number of line: 4773
   8-10
;; wd: nil or width

	 Pattern "list", number of line: 2324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "list", number of line: 984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "list", number of line: 2326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "error", number of line: 392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 4177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "r > n-1 or r < 0", number of line: 7313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "text", number of line: 392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "error", number of line: 7314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "%pi", number of line: 2957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "nil", number of line: 393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "lambda", number of line: 394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "matrix", number of line: 7317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "format", number of line: 396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "stream", number of line: 396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "when", number of line: 3446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "list", number of line: 2963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "matrix", number of line: 7318
   17-22
    coef: apply(matrix,

	 Pattern "error", number of line: 3447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "list", number of line: 7319
   21-24
                makelist(block([x,y],

	 Pattern "text", number of line: 3447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 3448
   1-2
;;

	 Pattern "nil", number of line: 399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "list", number of line: 2966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern ";;", number of line: 3449
   1-2
;; handle some special directives:

	 Pattern "+", number of line: 2326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "a)", number of line: 5363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 5363
   1-20
(in-package :maxima)

	 Pattern ";;", number of line: 5365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "list", number of line: 987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern ";;", number of line: 5366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "nil", number of line: 8564
   29-31
                      loops nil )

	 Pattern ";;", number of line: 5367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern "list", number of line: 990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "nil", number of line: 8565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern ";;", number of line: 5368
   1-2
;;

	 Pattern "start", number of line: 6636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "start", number of line: 6637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "list", number of line: 993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern ";;", number of line: 4774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "start", number of line: 6638
   13-17
      (setq start pos2  

	 Pattern "nil", number of line: 4774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 4775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "start", number of line: 6639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "nil", number of line: 4775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 4776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 4776
   8-10
;; xp: nil or preferred exponent

	 Pattern ";;", number of line: 4777
   1-2
;; ov: nil or overflow character

	 Pattern ";;", number of line: 9798
   1-2
;;  

	 Pattern "5", number of line: 7951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "nil", number of line: 4777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 4778
   1-2
;; pc: nil or padding character

	 Pattern "+", number of line: 1655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "nil", number of line: 4778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 4779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 4779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 4779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern "%pi", number of line: 7954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 4780
   1-2
;;

	 Pattern "+", number of line: 1657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern ";;", number of line: 4781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 4782
   1-2
;;

	 Pattern "+", number of line: 1659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "5", number of line: 4177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "%pi", number of line: 7957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "load(interpol); ", number of line: 9176
   4-19
/* load(interpol);                                                                     */

	 Pattern ";;", number of line: 1662
   1-2
;;  helper for ~v,#,vH

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 9177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern ";;", number of line: 1663
   1-2
;;

	 Pattern "5", number of line: 9177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "start", number of line: 400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "5", number of line: 4180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 4180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "nil", number of line: 402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "list", number of line: 2969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "draw2d", number of line: 4182
   4-9
/* draw2d(                                                                             */

	 Pattern "start", number of line: 405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "list", number of line: 2972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "list", number of line: 7322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "when", number of line: 406
   12-15
          (when pos1

	 Pattern "INTRODUCTION", number of line: 6020
   16-27
/*             INTRODUCTION

	 Pattern "list", number of line: 7324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "list", number of line: 2975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "interpolation", number of line: 6022
   27-39
This package defines some interpolation techniques.

	 Pattern "list", number of line: 2328
   14-17
    lovtab : listofvars(tab2),

	 Pattern ";;", number of line: 3451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "list", number of line: 7326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "list", number of line: 2329
   10-13
    lov: listofvars(sol),

	 Pattern "+", number of line: 7326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "list", number of line: 2330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "list", number of line: 7328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 2331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "when", number of line: 3453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "@@@", number of line: 6027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "5", number of line: 993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "lambda", number of line: 2331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 2332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 2332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "list", number of line: 2333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "list", number of line: 996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "+", number of line: 2333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 2335
   1-2
;;

	 Pattern "list", number of line: 999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "kill", number of line: 1000
   2-5
 kill (aabb)...

	 Pattern ";;", number of line: 5379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "list", number of line: 8575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern ";;", number of line: 4783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern "list", number of line: 7963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern ";;", number of line: 4784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "+", number of line: 9805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 9805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 8577
   27-29
                          nil 

	 Pattern ";;", number of line: 4786
   1-2
;;

	 Pattern "list", number of line: 7966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "nil", number of line: 8578
   27-29
                          nil )))

	 Pattern ";;", number of line: 4787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "nil", number of line: 9808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "+", number of line: 9809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "list", number of line: 7969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "+", number of line: 9810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "+", number of line: 1666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "5", number of line: 9180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 9180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern ";;", number of line: 2336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 2336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern ";;", number of line: 2337
   1-2
;;

	 Pattern "nil", number of line: 8580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern ";;", number of line: 2338
   1-2
;; Formatted printing to character streams

	 Pattern "list", number of line: 7329
   10-13
    lov: listofvars(sol),

	 Pattern "stream", number of line: 2338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 2339
   1-2
;;

	 Pattern "start", number of line: 8582
   23-27
                      start pos2 )

	 Pattern "list", number of line: 7330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern ";;", number of line: 2340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 2340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 2341
   1-2
;; Licence       : GPL2

	 Pattern "when", number of line: 8583
   18-21
                (when loops 

	 Pattern "list", number of line: 7331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "lambda", number of line: 7331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 7332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "nil", number of line: 8585
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 3461
   1-2
;; ~v,#,vH

	 Pattern "+", number of line: 7332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "draw2d", number of line: 4188
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 7333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "+", number of line: 7333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 2342
   1-2
;;

	 Pattern "when", number of line: 3463
   14-17
            (when (check-v# params)

	 Pattern ";;", number of line: 2343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern ";;", number of line: 7335
   1-2
;;

	 Pattern ";;", number of line: 2344
   1-2
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 7336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 7336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "list", number of line: 6033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "stringproc.texi ", number of line: 2344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 2345
   1-2
;;

	 Pattern "list", number of line: 3466
   20-23
                (dolist (p prms)

	 Pattern "list", number of line: 7972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "[]", number of line: 409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "list", number of line: 2978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern ";;", number of line: 410
   5-6
")));; newline possible spec

	 Pattern "5", number of line: 6035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "matrix", number of line: 6035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "newline", number of line: 410
   8-14
")));; newline possible spec

	 Pattern "a)", number of line: 6035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 7975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "list", number of line: 6036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "list", number of line: 2981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "5", number of line: 6036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "error", number of line: 412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "list", number of line: 6037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "text", number of line: 412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "list", number of line: 7978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "list", number of line: 2984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern ";;", number of line: 5380
   1-2
;;

	 Pattern ";;", number of line: 415
   1-2
;; recognize the directive:

	 Pattern "error", number of line: 5381
   16-20
(setq $stderr *error-output*

	 Pattern "5", number of line: 1003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "program", number of line: 1005
   6-12
This program is free software; you can redistribute

	 Pattern "format", number of line: 2349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "interpol_check_input(data,funame):=", number of line: 6040
   1-35
interpol_check_input(data,funame):=

	 Pattern "list", number of line: 6042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 6042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 6042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "list", number of line: 6043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 6043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 6043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 6043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "format", number of line: 2353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "a)", number of line: 6044
   17-18
   n: length(data),

	 Pattern ";;", number of line: 7337
   1-2
;;

	 Pattern ";;", number of line: 7338
   1-2
;; Formatted printing to character streams

	 Pattern "stream", number of line: 7338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 7339
   1-2
;;

	 Pattern ";;", number of line: 7340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 7340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 7341
   1-2
;; Licence       : GPL2

	 Pattern ";;", number of line: 7342
   1-2
;;

	 Pattern ";;", number of line: 7343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern ";;", number of line: 7344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 7344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 7345
   1-2
;;

	 Pattern "aj", number of line: 4193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "when", number of line: 9817
   12-15
          (when (= len 0) (incf len))

	 Pattern ";;", number of line: 4792
   1-2
;;    

	 Pattern "start", number of line: 416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "nil", number of line: 1667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 1668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "draw2d", number of line: 9182
   4-9
/* draw2d(                                                                             */

	 Pattern "+", number of line: 6643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "[]", number of line: 6644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "+", number of line: 6644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 6645
   4-5
") ;;  newline possible spec

	 Pattern ";;", number of line: 4798
   1-2
;;  

	 Pattern "newline", number of line: 6645
   8-14
") ;;  newline possible spec

	 Pattern ";;", number of line: 1673
   1-2
;;  find positions of matching braces

	 Pattern "+", number of line: 6647
   17-17
      (return (1+ p)) )))

	 Pattern ";;", number of line: 1674
   1-2
;;

	 Pattern "start", number of line: 420
   21-25
              (setq start 0 

	 Pattern "start", number of line: 1675
   30-34
(defun iter-positions (ctrls start)

	 Pattern ";;", number of line: 6650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "start", number of line: 421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern ";;", number of line: 6651
   1-2
;;

	 Pattern "list", number of line: 2987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "start", number of line: 1676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 1676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "stream", number of line: 5386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "draw2d", number of line: 9188
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 1679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 1679
   26-30
        ((zerop n) (list start end))

	 Pattern "start", number of line: 1680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "stream", number of line: 5388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 5388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 5389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "text", number of line: 5389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "+", number of line: 4805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 4805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "list", number of line: 8598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "when", number of line: 1683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "for i in select do", number of line: 4197
   4-21
   for i in select do(

	 Pattern "nil", number of line: 8600
   27-29
                          nil 

	 Pattern "nil", number of line: 8601
   27-29
                          nil ))) 

	 Pattern ";;", number of line: 3479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "error", number of line: 6046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 6046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "error", number of line: 4202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "list", number of line: 6047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "not correct", number of line: 4202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "a)", number of line: 6047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 6047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "format", number of line: 7349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "a)", number of line: 6048
   25-26
      then out: sort(data)

	 Pattern "program", number of line: 1011
   6-12
This program is distributed in the hope that it

	 Pattern "matrix", number of line: 6049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 6049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "list", number of line: 2990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "a)", number of line: 6050
   30-31
      then out: sort(args(data))

	 Pattern "list", number of line: 6051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "a)", number of line: 6051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 6051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 6052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "+", number of line: 6655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "list", number of line: 7981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern "start", number of line: 427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "format", number of line: 7353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "when", number of line: 427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "+", number of line: 428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern ";;", number of line: 429
   1-2
;;

	 Pattern "list", number of line: 7984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern ";;", number of line: 430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "+", number of line: 9823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "+", number of line: 6657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "list", number of line: 7987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "list", number of line: 2993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 2993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern ";;", number of line: 9825
   1-2
;;  

	 Pattern "+", number of line: 6659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "list", number of line: 7990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "list", number of line: 2996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "stream", number of line: 5390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "5", number of line: 2996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "error", number of line: 5392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "when", number of line: 1684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "nil", number of line: 4808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "aj", number of line: 9193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "text", number of line: 5392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "+", number of line: 4809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "nil", number of line: 5393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 5394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "nil", number of line: 8603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "a)", number of line: 2363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 2363
   1-20
(in-package :maxima)

	 Pattern "lambda", number of line: 5394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern ";;", number of line: 2365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "start", number of line: 8605
   23-27
                      start pos2 )

	 Pattern "format", number of line: 5396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern ";;", number of line: 2366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "for i in select do", number of line: 9197
   4-21
   for i in select do(

	 Pattern "stream", number of line: 5396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "when", number of line: 8606
   18-21
                (when loops 

	 Pattern ";;", number of line: 3482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "+", number of line: 4810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern ";;", number of line: 2367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 3483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern ";;", number of line: 2368
   1-2
;;

	 Pattern "nil", number of line: 3483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "INTRODUCTION", number of line: 1020
   16-27
/*             INTRODUCTION

	 Pattern "interpolation", number of line: 1022
   27-39
This package defines some interpolation techniques.

	 Pattern "start", number of line: 3485
   23-27
                (setq start pos2)

	 Pattern "error", number of line: 6053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "error", number of line: 4204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 4204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "list", number of line: 3488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "+", number of line: 1689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 1689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "error", number of line: 4206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 4206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "thru", number of line: 6055
   12-15
   for i:2 thru n do

	 Pattern "interpolation", number of line: 4208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "error", number of line: 6057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "case of two", number of line: 4210
   14-24
   if n=2 /* case of two points */

	 Pattern "+", number of line: 1692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "nil", number of line: 8608
   31-33
                  (setq loops nil) )

	 Pattern "error", number of line: 3489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 3489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 6662
   1-2
;;  helper for ~v,#,vH

	 Pattern "nil", number of line: 5399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "list", number of line: 2999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "start", number of line: 5400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern ";;", number of line: 6663
   1-2
;;

	 Pattern ";;", number of line: 8610
   1-2
;; ... or don't loop ...

	 Pattern "when", number of line: 4817
   12-15
          (when (= len 0) (incf len))

	 Pattern "text", number of line: 3489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "interpolation", number of line: 6062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern ";;", number of line: 3490
   1-2
;; ~?

	 Pattern "@@@", number of line: 1027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern "5", number of line: 6063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 6063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 6063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 6064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 6064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 7993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 7993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern ";;", number of line: 3494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern ";;", number of line: 431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "list", number of line: 6065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "5", number of line: 431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "list", number of line: 7996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "when", number of line: 432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "kill", number of line: 3000
   2-5
 kill (aabb)...

	 Pattern "+", number of line: 6666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "error", number of line: 9202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 9202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "nil", number of line: 5402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "+", number of line: 9830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "when", number of line: 9830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 9831
   1-2
;;  

	 Pattern "error", number of line: 9204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "when", number of line: 9832
   8-11
      (when (or ed xp)

	 Pattern "not correct", number of line: 9204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "a)", number of line: 7363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 7363
   1-20
(in-package :maxima)

	 Pattern "+", number of line: 1696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "error", number of line: 9206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 9206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "nil", number of line: 6667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 6668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern ";;", number of line: 434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "when", number of line: 434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "5", number of line: 3003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "+", number of line: 435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "5", number of line: 7996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "start", number of line: 5405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "program", number of line: 3005
   6-12
This program is free software; you can redistribute

	 Pattern "list", number of line: 7999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern "kill", number of line: 8000
   2-5
 kill (aabb)...

	 Pattern "when", number of line: 5406
   12-15
          (when pos1

	 Pattern "when", number of line: 9836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern ";;", number of line: 7365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern "interpolation", number of line: 9208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "list", number of line: 1033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "nil", number of line: 3497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern ";;", number of line: 7366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern ";;", number of line: 2379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern "+", number of line: 1701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "case of two", number of line: 9210
   14-24
   if n=2 /* case of two points */

	 Pattern "nil", number of line: 1702
   9-11
        nil )

	 Pattern ";;", number of line: 2380
   1-2
;;

	 Pattern ";;", number of line: 8613
   1-2
;; ... set the position in ctrls ...

	 Pattern "+", number of line: 9211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "start", number of line: 8615
   15-19
        (setq start pos2)

	 Pattern "+", number of line: 9840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern ";;", number of line: 8616
   1-2
;; ... and take the next argument

	 Pattern ";;", number of line: 9841
   1-2
;;  

	 Pattern "+", number of line: 438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "a)", number of line: 6067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "5", number of line: 1035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "matrix", number of line: 1035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 1035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 1036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern ";;", number of line: 7367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern "5", number of line: 1036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "+", number of line: 4211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern ";;", number of line: 7368
   1-2
;;

	 Pattern "list", number of line: 1037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "program", number of line: 3011
   6-12
This program is distributed in the hope that it

	 Pattern "error", number of line: 2381
   16-20
(setq $stderr *error-output*

	 Pattern "load(interpol); ", number of line: 6071
   4-19
/* load(interpol);                                                             */

	 Pattern "+", number of line: 4823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern ";;", number of line: 4825
   1-2
;;  

	 Pattern "list", number of line: 4217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "+", number of line: 1704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "list", number of line: 4218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 6072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 8003
   18-18
Copyright (C) 2005-2012 Mario Rodriguez Riotorto

	 Pattern "5", number of line: 6072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "program", number of line: 8005
   6-12
This program is free software; you can redistribute

	 Pattern ";;", number of line: 1709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "[]", number of line: 5409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern ";;", number of line: 6673
   1-2
;;  find positions of matching braces

	 Pattern ";;", number of line: 5410
   5-6
")));; newline possible spec

	 Pattern "list", number of line: 9217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "newline", number of line: 5410
   8-14
")));; newline possible spec

	 Pattern "+", number of line: 4830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "list", number of line: 9218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "error", number of line: 3506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "when", number of line: 4830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern ";;", number of line: 4831
   1-2
;;  

	 Pattern "error", number of line: 5412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern ";;", number of line: 6674
   1-2
;;

	 Pattern "text", number of line: 3506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 3507
   1-2
;; ~^

	 Pattern "start", number of line: 6675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "text", number of line: 5412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "start", number of line: 6676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 6676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "when", number of line: 4832
   8-11
      (when (or ed xp)

	 Pattern "list", number of line: 6679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 6679
   26-30
        ((zerop n) (list start end))

	 Pattern "program", number of line: 8011
   6-12
This program is distributed in the hope that it

	 Pattern "when", number of line: 446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern ";;", number of line: 1713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "error", number of line: 447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "when", number of line: 4836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "text", number of line: 447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 448
   1-2
;;

	 Pattern ";;", number of line: 7379
   1-2
;; Make stdout, stdin and stderr user-accessible

	 Pattern ";;", number of line: 1715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern ";;", number of line: 9848
   1-2
;;  

	 Pattern "%pi", number of line: 1715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern ";;", number of line: 9850
   1-2
;;

	 Pattern "when", number of line: 3509
   14-17
            (when (search "@" params)

	 Pattern "start", number of line: 8624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "error", number of line: 3510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "nil", number of line: 8624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern ";;", number of line: 9851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "text", number of line: 3510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern ";;", number of line: 5415
   1-2
;; recognize the directive:

	 Pattern ";;", number of line: 8627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "when", number of line: 3511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "start", number of line: 5416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "start", number of line: 6680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "start", number of line: 8628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "------------------------", number of line: 9851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "interpol_check_input(data,funame):=", number of line: 1040
   1-35
interpol_check_input(data,funame):=

	 Pattern "kill", number of line: 9853
   2-5
(kill (all),

	 Pattern "list", number of line: 1042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "start", number of line: 5420
   21-25
              (setq start 0 

	 Pattern "matrix", number of line: 1042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 1042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "start", number of line: 5421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "list", number of line: 1043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 1043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "matrix", number of line: 1043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 1043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern ";;", number of line: 449
   1-2
;; handle some special directives:

	 Pattern "list", number of line: 1716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "a)", number of line: 1044
   17-18
   n: length(data),

	 Pattern ";;", number of line: 451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "nil", number of line: 1716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "stream", number of line: 2386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "INTRODUCTION", number of line: 3020
   16-27
/*             INTRODUCTION

	 Pattern "interpolation", number of line: 3022
   27-39
This package defines some interpolation techniques.

	 Pattern "error", number of line: 1719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "stream", number of line: 2388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 2388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 2389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "text", number of line: 2389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "stream", number of line: 2390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern ";;", number of line: 7380
   1-2
;;

	 Pattern "5", number of line: 6075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "error", number of line: 7381
   16-20
(setq $stderr *error-output*

	 Pattern "when", number of line: 6683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "when", number of line: 6684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "%pi", number of line: 6075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "draw2d", number of line: 6077
   4-9
/* draw2d(                                                                     */

	 Pattern "start", number of line: 3518
   19-23
            (setq start pos2)

	 Pattern "+", number of line: 6689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern ";;", number of line: 3520
   1-2
;; ~:P and ~:@P

	 Pattern "start", number of line: 8636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern ";;", number of line: 3521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "start", number of line: 8637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "error", number of line: 1046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "text", number of line: 1719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "error", number of line: 2392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "text", number of line: 2392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "start", number of line: 8638
   13-17
      (setq start pos2  

	 Pattern "nil", number of line: 2393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "list", number of line: 9863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "list", number of line: 2394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "start", number of line: 8639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "+", number of line: 4840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "lambda", number of line: 2394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern ";;", number of line: 4841
   1-2
;;  

	 Pattern "start", number of line: 5427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "when", number of line: 5427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "thru", number of line: 9864
   15-18
    for k : 0 thru n - 1

	 Pattern "+", number of line: 5428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "format", number of line: 2396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern ";;", number of line: 5429
   1-2
;;

	 Pattern "stream", number of line: 2396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "Argument to", number of line: 1046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern ";;", number of line: 5430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "list", number of line: 1047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern ";;", number of line: 5431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 5431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "a)", number of line: 1047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 1047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "+", number of line: 9865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 9865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "a)", number of line: 1048
   25-26
      then out: sort(data)

	 Pattern "matrix", number of line: 1049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 1049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "+", number of line: 8643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern "a)", number of line: 1050
   30-31
      then out: sort(args(data))

	 Pattern "[]", number of line: 8644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "list", number of line: 1051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "+", number of line: 8644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "a)", number of line: 1051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 1051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 9869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern ";;", number of line: 8645
   4-5
") ;;  newline possible spec

	 Pattern "list", number of line: 1052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "newline", number of line: 8645
   8-14
") ;;  newline possible spec

	 Pattern "thru", number of line: 9870
   15-18
    for j : 0 thru n - 1

	 Pattern "+", number of line: 8647
   17-17
      (return (1+ p)) )))

	 Pattern "+", number of line: 9871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 9871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern ";;", number of line: 8650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "nil", number of line: 6689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "start", number of line: 3522
   20-24
             (setq start pos2)

	 Pattern ";;", number of line: 3524
   1-2
;; default part:

	 Pattern "thru", number of line: 4229
   12-15
   for i:2 thru n-1 do (

	 Pattern "for i in select do", number of line: 6085
   4-21
   for i in select do(

	 Pattern ";;", number of line: 3525
   1-2
;;

	 Pattern "+", number of line: 4230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern ";;", number of line: 3526
   1-2
;; loop ... 

	 Pattern "when", number of line: 453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "+", number of line: 6692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "when", number of line: 5431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "when", number of line: 5432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern ";;", number of line: 3529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "+", number of line: 6696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "@@@", number of line: 3027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern ";;", number of line: 5434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 4231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern ";;", number of line: 8651
   1-2
;;

	 Pattern ";;", number of line: 1735
   1-2
;; ~E, ~F, ~G

	 Pattern "error", number of line: 1053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "nil", number of line: 2399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "start", number of line: 2400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "thru", number of line: 1055
   12-15
   for i:2 thru n do

	 Pattern "nil", number of line: 2402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern "+", number of line: 4233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "+", number of line: 8655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern "+", number of line: 3533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "start", number of line: 2405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 8657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "+", number of line: 4235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "stream", number of line: 7386
   17-22
(defun $printf (stream ctrls &rest args)

	 Pattern "thru", number of line: 9229
   12-15
   for i:2 thru n-1 do (

	 Pattern "when", number of line: 2406
   12-15
          (when pos1

	 Pattern "INTRODUCTION", number of line: 8020
   16-27
/*             INTRODUCTION

	 Pattern "error", number of line: 1057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "interpolation", number of line: 8022
   27-39
This package defines some interpolation techniques.

	 Pattern ";;", number of line: 4848
   1-2
;;  

	 Pattern "+", number of line: 8659
   19-19
        (setq n (1+ n)) ))))

	 Pattern ";;", number of line: 1739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "when", number of line: 5434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "interpolation", number of line: 1062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "+", number of line: 5435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "+", number of line: 6701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "error", number of line: 6090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 6090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 4850
   1-2
;;

	 Pattern "lambda", number of line: 9880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 4851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "------------------------", number of line: 4851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "kill", number of line: 4853
   2-5
(kill (all),

	 Pattern "+", number of line: 9230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern ";;", number of line: 1741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 1741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "[]", number of line: 2409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "list", number of line: 1742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 8662
   1-2
;;  helper for ~v,#,vH

	 Pattern "nil", number of line: 6702
   9-11
        nil )

	 Pattern ";;", number of line: 2410
   5-6
")));; newline possible spec

	 Pattern "newline", number of line: 2410
   8-14
")));; newline possible spec

	 Pattern "+", number of line: 6704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "thru", number of line: 6094
   12-15
   for i:1 thru n do(

	 Pattern "list", number of line: 3033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern "stream", number of line: 7388
   24-29   48-53   56-61
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "nil", number of line: 7388
   35-37
    ((and (not (member stream '(t nil))) (not (streamp stream)))

	 Pattern "error", number of line: 7389
   12-16
      (gf-merror (intl:gettext 

	 Pattern "@@@", number of line: 8027
   7-9
mario @@@ edu DOT xunta DOT es

	 Pattern ";;", number of line: 8663
   1-2
;;

	 Pattern "text", number of line: 7389
   27-30
      (gf-merror (intl:gettext 

	 Pattern "+", number of line: 9231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "error", number of line: 2412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "stream", number of line: 7390
   64-69
        "`printf': first argument must be `true', `false' or a stream." )))

	 Pattern "text", number of line: 2412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "error", number of line: 7392
   12-16
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern "5", number of line: 1063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 1063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 1063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 1064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 3035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern ";;", number of line: 2415
   1-2
;; recognize the directive:

	 Pattern "5", number of line: 1064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "+", number of line: 8666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "list", number of line: 1065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "start", number of line: 2416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 9233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "nil", number of line: 8667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 8668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "+", number of line: 5438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "text", number of line: 7392
   27-30
      (gf-merror (intl:gettext "`printf': second argument must be a string.")) ))

	 Pattern ";;", number of line: 461
   1-2
;; ~v,#,vH

	 Pattern "+", number of line: 9235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "+", number of line: 4244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "nil", number of line: 1742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "matrix", number of line: 3035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 3035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "list", number of line: 3036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "nil", number of line: 7393
   39-41
  (setq args (prepare-args ctrls args nil))

	 Pattern "5", number of line: 3036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "list", number of line: 7394
   42-45
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "when", number of line: 463
   14-17
            (when (check-v# params)

	 Pattern "list", number of line: 3037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "lambda", number of line: 7394
   26-31
  (let ((body (mapcar #'(lambda (x) (if (listp x) `(quote ,x) x)) args)))

	 Pattern "thru", number of line: 6096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 6709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "format", number of line: 7396
   13-18
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "list", number of line: 466
   20-23
                (dolist (p prms)

	 Pattern "stream", number of line: 7396
   21-26
    (eval `(format ,stream ,ctrls ,@body)) ))

	 Pattern "+", number of line: 6098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "nil", number of line: 7399
   54-56
(defun prepare-args (ctrls todo done &optional (loop nil))

	 Pattern "start", number of line: 7400
   10-14
  (let ((start 0) pos1 pos2 pos1a

	 Pattern "list", number of line: 8033
   38-41
/* Returns de input in the form of a list of pairs, ordered wrt the first */

	 Pattern ";;", number of line: 6713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "start", number of line: 2420
   21-25
              (setq start 0 

	 Pattern ";;", number of line: 6715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 6715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "start", number of line: 2421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "thru", number of line: 4247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "+", number of line: 4248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "interpol_check_input(data,funame):=", number of line: 3040
   1-35
interpol_check_input(data,funame):=

	 Pattern "list", number of line: 3042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "thru", number of line: 4251
   12-15
   for j:2 thru n do (

	 Pattern "5", number of line: 8035
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "error", number of line: 1745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "matrix", number of line: 8035
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "a)", number of line: 8035
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                   */

	 Pattern "text", number of line: 1745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 8036
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "5", number of line: 8036
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                            */

	 Pattern "list", number of line: 8037
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be */

	 Pattern "+", number of line: 3540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern ";;", number of line: 1747
   1-2
;; ~D

	 Pattern "list", number of line: 4863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "a)", number of line: 1067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "thru", number of line: 4864
   15-18
    for k : 0 thru n - 1

	 Pattern "matrix", number of line: 3042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 3042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern ";;", number of line: 1751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "nil", number of line: 7402
   25-27
        (skip 0) (loops nil) (index 0) )

	 Pattern ";;", number of line: 8673
   1-2
;;  find positions of matching braces

	 Pattern ";;", number of line: 8674
   1-2
;;

	 Pattern "when", number of line: 5446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "error", number of line: 5447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "start", number of line: 7405
   41-45   48-52
          (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "start", number of line: 8675
   30-34
(defun iter-positions (ctrls start)

	 Pattern "start", number of line: 8676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 8676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "when", number of line: 7406
   12-15
          (when pos1

	 Pattern "interpol_check_input(data,funame):=", number of line: 8040
   1-35
interpol_check_input(data,funame):=

	 Pattern ";;", number of line: 1753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "text", number of line: 5447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 5448
   1-2
;;

	 Pattern "+", number of line: 9244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "lambda", number of line: 9886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 8679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 8679
   26-30
        ((zerop n) (list start end))

	 Pattern "list", number of line: 6716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "%pi", number of line: 1753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern ";;", number of line: 5449
   1-2
;; handle some special directives:

	 Pattern "list", number of line: 1754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 1754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 5451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "list", number of line: 8042
   11-14
   if not listp(data) and not matrixp(data)

	 Pattern "matrix", number of line: 8042
   31-36
   if not listp(data) and not matrixp(data)

	 Pattern "a)", number of line: 8042
   20-21   42-43
   if not listp(data) and not matrixp(data)

	 Pattern "list", number of line: 3043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "error", number of line: 3043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "start", number of line: 2427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "matrix", number of line: 3043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "Argument to", number of line: 3043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "when", number of line: 2427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "list", number of line: 8043
   54-57
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "load(interpol); ", number of line: 1071
   4-19
/* load(interpol);                                                             */

	 Pattern "+", number of line: 2428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern "a)", number of line: 3044
   17-18
   n: length(data),

	 Pattern ";;", number of line: 2429
   1-2
;;

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 1072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "error", number of line: 3046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "5", number of line: 1072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 2430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern "Argument to", number of line: 3046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern ";;", number of line: 2431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "list", number of line: 3047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "5", number of line: 2431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "error", number of line: 8043
   12-16
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "thru", number of line: 9247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "matrix", number of line: 8043
   62-67
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "+", number of line: 9248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "Argument to", number of line: 8043
   19-29
      then error("Argument to '",funame,"' must be a list or matrix"),

	 Pattern "when", number of line: 2431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "a)", number of line: 3047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 3047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 8044
   17-18
   n: length(data),

	 Pattern "a)", number of line: 3048
   25-26
      then out: sort(data)

	 Pattern "matrix", number of line: 3049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 3049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "+", number of line: 4865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 4865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "thru", number of line: 9251
   12-15
   for j:2 thru n do (

	 Pattern "nil", number of line: 6716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "error", number of line: 6719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 4869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "interpolation", number of line: 6110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern "text", number of line: 6719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "aj", number of line: 4259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern " Linear interpolation. The argument must be either:", number of line: 6110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "thru", number of line: 4870
   15-18
    for j : 0 thru n - 1

	 Pattern "5", number of line: 6111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "+", number of line: 4871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "matrix", number of line: 6111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "%pi", number of line: 4871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "a)", number of line: 6111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "aj", number of line: 4262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "list", number of line: 6112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 6112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "[]", number of line: 7409
   65-66
          (if (and (zerop skip) (or (not pos1) (search spec "^{}[]<>%;&~tpTP

	 Pattern "error", number of line: 1757
   18-22
            (gf-merror (intl:gettext 

	 Pattern ";;", number of line: 7410
   5-6
")));; newline possible spec

	 Pattern "list", number of line: 6113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "text", number of line: 1757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "newline", number of line: 7410
   8-14
")));; newline possible spec

	 Pattern "when", number of line: 5453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "error", number of line: 7412
   18-22
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "start", number of line: 8680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "5", number of line: 1075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "lambda", number of line: 9895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "%pi", number of line: 1075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "when", number of line: 8683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "when", number of line: 8684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "draw2d", number of line: 1077
   4-9
/* draw2d(                                                                     */

	 Pattern "+", number of line: 4265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern ";;", number of line: 1759
   1-2
;; ~A, ~S

	 Pattern ";;", number of line: 5461
   1-2
;; ~v,#,vH

	 Pattern "aj", number of line: 4266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 4266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern ";;", number of line: 1762
   1-2
;; ~C

	 Pattern "a)", number of line: 6115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "text", number of line: 7412
   33-36
            (gf-merror (intl:gettext "`printf': arguments exhausted.")) ))

	 Pattern "when", number of line: 2432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern "interpolation", number of line: 4271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern ";;", number of line: 7415
   1-2
;; recognize the directive:

	 Pattern ";;", number of line: 2434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "start", number of line: 7416
   39-43   46-50
        (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "when", number of line: 2434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 2435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "load(interpol); ", number of line: 6119
   4-19
/* load(interpol);                                                             */

	 Pattern "+", number of line: 4273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "error", number of line: 8046
   12-16
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "Argument to", number of line: 8046
   19-29
      then error("Argument to '",funame,"' has too few sample points")

	 Pattern "list", number of line: 8047
   11-14   59-62
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "+", number of line: 2438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern "a)", number of line: 8047
   20-21   88-89
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "lambda", number of line: 8047
   47-52
   elseif listp(data) and every('identity,map(lambda([x], listp(x) and length(x)=2),data))

	 Pattern "a)", number of line: 8048
   25-26
      then out: sort(data)

	 Pattern "a)", number of line: 3050
   30-31
      then out: sort(args(data))

	 Pattern "list", number of line: 3051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "matrix", number of line: 8049
   11-16
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 8049
   22-23
   elseif matrixp(data) and length(data[1]) = 2

	 Pattern "a)", number of line: 3051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 3051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 3052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern "aj", number of line: 9259
   7-8
      aj: (tab2[j][1] - defaults[3]) / aux,

	 Pattern "a)", number of line: 8050
   30-31
      then out: sort(args(data))

	 Pattern "list", number of line: 8051
   11-14   63-66
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "error", number of line: 3053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern ";;", number of line: 3554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "a)", number of line: 8051
   20-21   76-77
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "lambda", number of line: 8051
   47-52
   elseif listp(data) and every('identity,map(lambda([x], not listp(x)),data)) 

	 Pattern "list", number of line: 8052
   21-24
      then out: makelist([i,data[i]],i,1,n)

	 Pattern ";;", number of line: 479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "thru", number of line: 3055
   12-15
   for i:2 thru n do

	 Pattern "error", number of line: 3057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern ";;", number of line: 482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "nil", number of line: 3559
   29-31
                      loops nil )

	 Pattern ";;", number of line: 483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "lambda", number of line: 4880
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "nil", number of line: 483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "nil", number of line: 3560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 6120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "5", number of line: 6120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "start", number of line: 7420
   21-25
              (setq start 0 

	 Pattern "------------------------", number of line: 4275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "for i in select do", number of line: 1085
   4-21
   for i in select do(

	 Pattern "start", number of line: 485
   23-27
                (setq start pos2)

	 Pattern "lambda", number of line: 9901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "list", number of line: 488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "error", number of line: 8053
   12-16
      else error("Error in arguments to '",funame,"' function"),

	 Pattern "error", number of line: 489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "when", number of line: 5463
   14-17
            (when (check-v# params)

	 Pattern "aj", number of line: 9262
   12-13   19-20
      cj: (aj^3 - aj) * aux,

	 Pattern "text", number of line: 489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "nil", number of line: 3564
   29-31
                      loops nil )

	 Pattern "+", number of line: 9265
   12-12
      s: s + charfun2(defaults[3], a, b) *

	 Pattern "nil", number of line: 3565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "error", number of line: 1090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 1090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "interpolation", number of line: 3062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern "aj", number of line: 9266
   21-22
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "+", number of line: 9266
   39-39   57-57   72-72
             expand(aj * tab2[j-1][2] + bj * tab2[j][2] + cj * y2[j-1] + dj * y2[j])  ),

	 Pattern "start", number of line: 7421
   45-49   52-56
                    pos1 (search "~" ctrls :start2 start) ))

	 Pattern "5", number of line: 3063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 3063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 3063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 3064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 3064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "+", number of line: 8689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "nil", number of line: 8689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "+", number of line: 4277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern "list", number of line: 3065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "+", number of line: 8692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern ";;", number of line: 490
   1-2
;; ~?

	 Pattern ";;", number of line: 1764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern "thru", number of line: 8055
   12-15
   for i:2 thru n do

	 Pattern ";;", number of line: 1765
   1-2
;; ~[

	 Pattern "list", number of line: 5466
   20-23
                (dolist (p prms)

	 Pattern "error", number of line: 8057
   15-19
         then error("Duplicated abscissas are not allowed"),

	 Pattern "lambda", number of line: 4886
   10-15
    map (lambda ([u], is (u < float_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 1768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "when", number of line: 1768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "interpolation", number of line: 8062
   15-27
/* Lagrangian interpolation. The argument must be either:                      */

	 Pattern ";;", number of line: 494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "5", number of line: 4282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 4282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 4282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 3067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "list", number of line: 4283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 4283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "interpolation", number of line: 9271
   13-25
/* Rational interpolation, with interpolating function of the form             */

	 Pattern "nil", number of line: 497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern "list", number of line: 4284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "load(interpol); ", number of line: 3071
   4-19
/* load(interpol);                                                             */

	 Pattern "start", number of line: 7427
   46-50
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "when", number of line: 2446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "when", number of line: 7427
   10-13
        (when (search spec "}]>;%&t~") (setq start pos2) (go tag1))

	 Pattern "error", number of line: 2447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "+", number of line: 7428
   38-38
        (setq params (subseq ctrls (1+ pos1) (1- pos2)))

	 Pattern ";;", number of line: 1772
   1-2
;; bf: bigfloat

	 Pattern "lambda", number of line: 4895
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern "text", number of line: 2447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern ";;", number of line: 1773
   1-2
;; wd: nil or width

	 Pattern ";;", number of line: 7429
   1-2
;;

	 Pattern ";;", number of line: 2448
   1-2
;;

	 Pattern "nil", number of line: 1773
   8-10
;; wd: nil or width

	 Pattern ";;", number of line: 7430
   1-2
;; pre-test for ~nr, ~vr, ~#r :

	 Pattern ";;", number of line: 2449
   1-2
;; handle some special directives:

	 Pattern ";;", number of line: 1774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "nil", number of line: 1774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 7431
   1-2
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "5", number of line: 7431
   36-36
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern ";;", number of line: 1775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "when", number of line: 7431
   55-58
;; check if radix is legal (Maxima 5.14 gcl segfaults when radix is 1)

	 Pattern "nil", number of line: 1775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 2451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern ";;", number of line: 1776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 1776
   8-10
;; xp: nil or preferred exponent

	 Pattern "when", number of line: 7432
   10-13
        (when (and (string-equal spec "r") (string/= "" params))

	 Pattern ";;", number of line: 1777
   1-2
;; ov: nil or overflow character

	 Pattern "nil", number of line: 1777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 1778
   1-2
;; pc: nil or padding character

	 Pattern "nil", number of line: 1778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 1779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 1779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 8696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "5", number of line: 6123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "5", number of line: 8063
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "%pi", number of line: 6123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "matrix", number of line: 8063
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 8063
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 8064
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 8064
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "+", number of line: 9910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "list", number of line: 8065
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "kill", number of line: 9913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern "+", number of line: 8701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "list", number of line: 9916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 6735
   1-2
;; ~E, ~F, ~G

	 Pattern "draw2d", number of line: 6125
   4-9
/* draw2d(                                                                     */

	 Pattern "thru", number of line: 1094
   12-15
   for i:1 thru n do(

	 Pattern "a)", number of line: 8067
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "thru", number of line: 1096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 6739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "+", number of line: 9273
   20-20   26-26   33-33
/*           p  x  + ... + p  x + p                                            */

	 Pattern "+", number of line: 1098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "nil", number of line: 1779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern "nil", number of line: 8702
   9-11
        nil )

	 Pattern ";;", number of line: 1780
   1-2
;;

	 Pattern "lambda", number of line: 4901
   10-15
    map (lambda ([u], is (u < bfloat_approx_equal_tolerance)), map (abs, %%)),

	 Pattern ";;", number of line: 1781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 1782
   1-2
;;

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 3072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "a)", number of line: 4286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "5", number of line: 3072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 1783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 1784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "list", number of line: 3575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "5", number of line: 3075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern ";;", number of line: 1786
   1-2
;;

	 Pattern "%pi", number of line: 3075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern ";;", number of line: 1787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "------------------------", number of line: 9275
   14-37
/*    R(x) = ------------------------                                          */

	 Pattern "draw2d", number of line: 3077
   4-9
/* draw2d(                                                                     */

	 Pattern ";;", number of line: 7434
   59-60
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "when", number of line: 2453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "+", number of line: 8704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "+", number of line: 9277
   20-20   26-26   33-33
/*           q  x  + ... + q  x + q                                            */

	 Pattern ";;", number of line: 8709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 8713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "when", number of line: 7434
   14-17
            (when (or ($digitcharp ch) (search ch "v#V")) ;; stringproc.lisp/$digitcharp 

	 Pattern "+", number of line: 4910
   15-15
(foo0 : [1, 1 + %i, 1 - %i, 2], 0);

	 Pattern "+", number of line: 7435
   27-27
              (do ((p 1 (1+ p)))

	 Pattern "error", number of line: 506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "text", number of line: 506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "kill", number of line: 4913
   2-5
(kill (foo), foo : foo0, fft (foo), foo);

	 Pattern ";;", number of line: 507
   1-2
;; ~^

	 Pattern ";;", number of line: 5479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "interpolation", number of line: 1110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern "+", number of line: 7438
   45-45
                      ch (subseq params p (1+ p)) ))

	 Pattern " Linear interpolation. The argument must be either:", number of line: 1110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "list", number of line: 4916
   63-66
(foo : make_array (any, 4), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern ";;", number of line: 8715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 8715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "5", number of line: 1111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 1111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 1111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 8716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 1112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 1112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "nil", number of line: 8716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "list", number of line: 4919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 4919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "list", number of line: 1113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "error", number of line: 8719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 8719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "5", number of line: 9282
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 1115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "[]", number of line: 4924
   6-7
fft ([]);

	 Pattern "matrix", number of line: 9282
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 9282
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "5", number of line: 4292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "list", number of line: 9283
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 9283
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "list", number of line: 9284
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "thru", number of line: 4293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "draw2d", number of line: 4294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern ";;", number of line: 1792
   1-2
;;    

	 Pattern "nil", number of line: 3577
   27-29
                          nil 

	 Pattern "nil", number of line: 3578
   27-29
                          nil )))

	 Pattern "when", number of line: 509
   14-17
            (when (search "@" params)

	 Pattern ";;", number of line: 5482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "error", number of line: 510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "text", number of line: 510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "load(interpol); ", number of line: 8071
   4-19
/* load(interpol);                                                             */

	 Pattern ";;", number of line: 5483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "when", number of line: 511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "nil", number of line: 3580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "for i in select do", number of line: 6133
   4-21
   for i in select do(

	 Pattern "start", number of line: 3582
   23-27
                      start pos2 )

	 Pattern ";;", number of line: 6741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 6741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 6742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 5483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "when", number of line: 3583
   18-21
                (when loops 

	 Pattern "nil", number of line: 6742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 8072
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "start", number of line: 5485
   23-27
                (setq start pos2)

	 Pattern "[]", number of line: 4925
   1-2
[];

	 Pattern "for i in select do", number of line: 3085
   4-21
   for i in select do(

	 Pattern "a)", number of line: 9286
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern ";;", number of line: 1798
   1-2
;;  

	 Pattern "error", number of line: 6138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 6138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "[]", number of line: 4927
   8-9
bf_fft([]);

	 Pattern "[]", number of line: 4928
   1-2
[];

	 Pattern "error", number of line: 3090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 3090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 2461
   1-2
;; ~v,#,vH

	 Pattern "when", number of line: 2463
   14-17
            (when (check-v# params)

	 Pattern "case of two", number of line: 6142
   14-24
   if n=2 /* case of two points */

	 Pattern "5", number of line: 4936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "list", number of line: 2466
   20-23
                (dolist (p prms)

	 Pattern "5", number of line: 8072
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "nil", number of line: 3585
   31-33
                  (setq loops nil) )

	 Pattern "error", number of line: 6745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 6745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 5488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern ";;", number of line: 6747
   1-2
;; ~D

	 Pattern "error", number of line: 5489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 5489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "5", number of line: 8075
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 8075
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "draw2d", number of line: 8077
   4-9
/* draw2d(                                                                     */

	 Pattern ";;", number of line: 6751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "when", number of line: 7446
   16-19
              (when (or (< radix 2.) (> radix 36.))

	 Pattern "error", number of line: 7447
   22-26
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "text", number of line: 5489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 5490
   1-2
;; ~?

	 Pattern "load(interpol); ", number of line: 1119
   4-19
/* load(interpol);                                                             */

	 Pattern "text", number of line: 7447
   37-40
                (gf-merror (intl:gettext "`printf': illegal radix in r-directive: ~m") radix)) )))

	 Pattern "+", number of line: 1805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 1805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "list", number of line: 9919
   64-67
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "kill", number of line: 9919
   2-5
(kill (foo), array (foo, 3), fillarray (foo, foo0), fft (foo), listarray (foo));

	 Pattern "start", number of line: 518
   19-23
            (setq start pos2)

	 Pattern ";;", number of line: 7448
   1-2
;;

	 Pattern ";;", number of line: 7449
   1-2
;; handle some special directives:

	 Pattern ";;", number of line: 6753
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 6753
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "5", number of line: 4939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern "list", number of line: 6754
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 7451
   1-2
;; ~v,v,v<spec>, spec=ABDEFGORSTX<~&%$   (# needs no special care; ~v[ not supported, see below)

	 Pattern "nil", number of line: 6754
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "error", number of line: 6757
   18-22
            (gf-merror (intl:gettext 

	 Pattern "when", number of line: 7453
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "text", number of line: 6757
   33-36
            (gf-merror (intl:gettext 

	 Pattern "5", number of line: 4942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 6759
   1-2
;; ~A, ~S

	 Pattern "for i in select do", number of line: 8085
   4-21
   for i in select do(

	 Pattern "list", number of line: 3598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "5", number of line: 4945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 8735
   1-2
;; ~E, ~F, ~G

	 Pattern "+", number of line: 6143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "5", number of line: 9292
   16-16   23-23   38-38
/* p: [[7.2, 2.5], [8.5, 2.1], [1.6, 5.1], [3.4, 2.4], [6.7, 7.9]]$            */

	 Pattern "[]", number of line: 9924
   6-7
fft ([]);

	 Pattern "[]", number of line: 9925
   1-2
[];

	 Pattern ";;", number of line: 520
   1-2
;; ~:P and ~:@P

	 Pattern "[]", number of line: 9927
   8-9
bf_fft([]);

	 Pattern "thru", number of line: 9293
   12-15
/* for k:0 thru length(p)-1 do                                                 */

	 Pattern "thru", number of line: 6146
   20-23
      else for i:2 thru n do(

	 Pattern "draw2d", number of line: 9294
   6-11
/*   draw2d(explicit(ratinterpol(p,k),x,0,9),                                  */

	 Pattern "[]", number of line: 9928
   1-2
[];

	 Pattern ";;", number of line: 521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "start", number of line: 522
   20-24
             (setq start pos2)

	 Pattern ";;", number of line: 524
   1-2
;; default part:

	 Pattern "nil", number of line: 1808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 1120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 525
   1-2
;;

	 Pattern "+", number of line: 1809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "thru", number of line: 3094
   12-15
   for i:1 thru n do(

	 Pattern "5", number of line: 1120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 526
   1-2
;; loop ... 

	 Pattern "+", number of line: 1810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern "thru", number of line: 3096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 5494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern ";;", number of line: 6762
   1-2
;; ~C

	 Pattern "5", number of line: 4948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern ";;", number of line: 6764
   36-37
      (setq arg (character arg)) ) ;; conversion to Lisp char

	 Pattern ";;", number of line: 6765
   1-2
;; ~[

	 Pattern "nil", number of line: 5497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern ";;", number of line: 2479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern "5", number of line: 4951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "5", number of line: 1123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 1123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern ";;", number of line: 2482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern ";;", number of line: 8739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern "nil", number of line: 3600
   27-29
                          nil 

	 Pattern ";;", number of line: 8741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "draw2d", number of line: 1125
   4-9
/* draw2d(                                                                     */

	 Pattern "%pi", number of line: 8741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "for i in select do", number of line: 4304
   5-22
    for i in select do(

	 Pattern "list", number of line: 8742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "+", number of line: 6152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "nil", number of line: 3601
   27-29
                          nil ))) 

	 Pattern ";;", number of line: 6768
   55-56
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "nil", number of line: 3603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "+", number of line: 6153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "start", number of line: 3605
   23-27
                      start pos2 )

	 Pattern "%pi", number of line: 4954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern ";;", number of line: 7461
   1-2
;; ~v,#,vH

	 Pattern "%pi", number of line: 4957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "when", number of line: 7463
   14-17
            (when (check-v# params)

	 Pattern "when", number of line: 3606
   18-21
                (when loops 

	 Pattern "nil", number of line: 8742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "interpolation", number of line: 6160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "when", number of line: 6768
   10-13
        (when (integerp arg) (setq arg (1- arg))) ))) ;; 1-based indexing!

	 Pattern "list", number of line: 7466
   20-23
                (dolist (p prms)

	 Pattern "list", number of line: 4963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern ";;", number of line: 6772
   1-2
;; bf: bigfloat

	 Pattern ";;", number of line: 6773
   1-2
;; wd: nil or width

	 Pattern "nil", number of line: 6773
   8-10
;; wd: nil or width

	 Pattern "5", number of line: 6161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "error", number of line: 8090
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 6774
   1-2
;; dd: nil or decimal digits behind floating point

	 Pattern "matrix", number of line: 6161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "not correct", number of line: 8090
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "a)", number of line: 6161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 6162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 6162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "error", number of line: 5506
   22-26
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern ";;", number of line: 2483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "+", number of line: 3098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "text", number of line: 5506
   37-40
                (gf-merror (intl:gettext "`printf': illegal directive ~~~m?") params)) ))

	 Pattern "nil", number of line: 2483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern ";;", number of line: 5507
   1-2
;; ~^

	 Pattern "start", number of line: 2485
   23-27
                (setq start pos2)

	 Pattern ";;", number of line: 529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern "nil", number of line: 6774
   8-10
;; dd: nil or decimal digits behind floating point

	 Pattern ";;", number of line: 6775
   1-2
;; ed: nil or minimal exponent digits

	 Pattern "nil", number of line: 6775
   8-10
;; ed: nil or minimal exponent digits

	 Pattern ";;", number of line: 6776
   1-2
;; xp: nil or preferred exponent

	 Pattern "nil", number of line: 6776
   8-10
;; xp: nil or preferred exponent

	 Pattern "when", number of line: 1817
   12-15
          (when (= len 0) (incf len))

	 Pattern "list", number of line: 2488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern ";;", number of line: 6777
   1-2
;; ov: nil or overflow character

	 Pattern "list", number of line: 6163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern "error", number of line: 2489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 2489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "list", number of line: 4966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "error", number of line: 8745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 8745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "list", number of line: 4969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "5", number of line: 9936
   21-21
compare_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern ";;", number of line: 8747
   1-2
;; ~D

	 Pattern "nil", number of line: 6777
   8-10
;; ov: nil or overflow character

	 Pattern ";;", number of line: 6778
   1-2
;; pc: nil or padding character

	 Pattern "nil", number of line: 6778
   8-10
;; pc: nil or padding character

	 Pattern ";;", number of line: 6779
   1-2
;; at: nil or true; sets "+" if true

	 Pattern "+", number of line: 6779
   27-27
;; at: nil or true; sets "+" if true

	 Pattern "for i in select do", number of line: 9304
   5-22
    for i in select do(

	 Pattern "+", number of line: 533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "nil", number of line: 6779
   8-10
;; at: nil or true; sets "+" if true

	 Pattern ";;", number of line: 6780
   1-2
;;

	 Pattern "5", number of line: 9939
   24-24
compare_bf_ft ([2, -3, 5, -7, 11, -13, 17, -19]);

	 Pattern ";;", number of line: 6781
   41-42
(defun bprintf (bf wd dd ed xp ov pc at);; ~w,d,e,x,o,p@H

	 Pattern ";;", number of line: 8751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern ";;", number of line: 6782
   1-2
;;

	 Pattern "nil", number of line: 3608
   31-33
                  (setq loops nil) )

	 Pattern "5", number of line: 9942
   26-26
compare_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 6783
   68-69
  (labels ((cs* (&rest args) (eval `(concatenate 'string ,@args))) ;; functions to shortcut 

	 Pattern ";;", number of line: 3610
   1-2
;; ... or don't loop ...

	 Pattern ";;", number of line: 6784
   68-69
           (ms* (len ie) (make-string len :initial-element ie)) )  ;;   some parts of the code 

	 Pattern "error", number of line: 4309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "when", number of line: 5509
   14-17
            (when (search "@" params)

	 Pattern "text", number of line: 2489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 3613
   1-2
;; ... set the position in ctrls ...

	 Pattern "a)", number of line: 6165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "error", number of line: 5510
   20-24
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern ";;", number of line: 2490
   1-2
;; ~?

	 Pattern "text", number of line: 5510
   35-38
              (gf-merror (intl:gettext "`printf': illegal directive ~~~m^") params) )

	 Pattern "start", number of line: 3615
   15-19
        (setq start pos2)

	 Pattern "interpolation", number of line: 3110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern "not correct", number of line: 4309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern " Linear interpolation. The argument must be either:", number of line: 3110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern ";;", number of line: 2494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "5", number of line: 3111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 3111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "a)", number of line: 3111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 3112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "5", number of line: 3112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "r > n-1 or r < 0", number of line: 4313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "list", number of line: 3113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern "error", number of line: 4314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "+", number of line: 1823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern "for i in select do", number of line: 1133
   4-21
   for i in select do(

	 Pattern "5", number of line: 9945
   29-29
compare_bf_ft ([1/2, 1/3, 1/5, 1/7, -1/11, -1/13, -1/17, -1/19]);

	 Pattern ";;", number of line: 1825
   1-2
;;  

	 Pattern "nil", number of line: 2497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern "thru", number of line: 8094
   12-15
   for i:1 thru n do(

	 Pattern "list", number of line: 4972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "thru", number of line: 8096
   15-18
      for k:1 thru n do

	 Pattern ";;", number of line: 6786
   1-2
;;

	 Pattern "list", number of line: 4975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern ";;", number of line: 6787
   33-34
    (let ((fpprec (caddar bf))) ;; keep old fpprec in case it differs to current fpprec

	 Pattern "+", number of line: 8098
   16-16
      sum: sum + prod * tab2[i][2] ),

	 Pattern "list", number of line: 4978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "error", number of line: 9309
   13-17
       then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 9309
   40-50
       then error("Option 'varname' is not correct"),

	 Pattern "load(interpol); ", number of line: 6176
   4-19
/* load(interpol);                                                                     */

	 Pattern ";;", number of line: 6792
   1-2
;;    

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 6177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "+", number of line: 540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "list", number of line: 4981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern ";;", number of line: 7479
   1-2
;; ~@[, ~#[, ~n[

	 Pattern ";;", number of line: 3616
   1-2
;; ... and take the next argument

	 Pattern "when", number of line: 5511
   14-17
            (when (> (setq skip (count-v params)) 0)

	 Pattern "5", number of line: 9948
   17-17   23-23   27-27   29-29   35-35   41-41   47-47   53-53   59-59
compare_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "matrix", number of line: 4317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "5", number of line: 6177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern ";;", number of line: 6798
   1-2
;;  

	 Pattern "matrix", number of line: 4318
   17-22
    coef: apply(matrix,

	 Pattern "list", number of line: 4319
   21-24
                makelist(block([x,y],

	 Pattern "start", number of line: 3624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "+", number of line: 1830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "error", number of line: 1138
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "when", number of line: 1830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern "list", number of line: 4322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "not correct", number of line: 1138
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern ";;", number of line: 1831
   1-2
;;  

	 Pattern "nil", number of line: 3624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "when", number of line: 1832
   8-11
      (when (or ed xp)

	 Pattern "a)", number of line: 3115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "case of two", number of line: 1142
   14-24
   if n=2 /* case of two points */

	 Pattern ";;", number of line: 7482
   37-38
              ((string= "" params)) ;; don't check another condition

	 Pattern "list", number of line: 4324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "r > n-1 or r < 0", number of line: 9313
   27-42
    if not integerp(r) or r > n-1 or r < 0

	 Pattern "error", number of line: 9314
   12-16
      then error("Degree of numerator must be a positive integer less than sample size"),

	 Pattern "interpolation", number of line: 8110
   11-23
/* Linear interpolation. The argument must be either:                          */

	 Pattern " Linear interpolation. The argument must be either:", number of line: 8110
   3-53
/* Linear interpolation. The argument must be either:                          */

	 Pattern "5", number of line: 8111
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "matrix", number of line: 8111
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 4984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern ";;", number of line: 7483
   51-52
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "nil", number of line: 7483
   68-70
              ((or (and (string= "@" params) arg) ;; if arg is not nil, arg is not consumed

	 Pattern "5", number of line: 9951
   20-20   26-26   30-30   32-32   38-38   44-44   50-50   56-56   62-62
compare_bf_ft ([-2.5, -3.5, -5.5, -7.5, 11.5, 13.5, 17.5, 19.5]);

	 Pattern "list", number of line: 4987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "start", number of line: 7485
   23-27
                (setq start pos2)

	 Pattern "load(interpol); ", number of line: 3119
   4-19
/* load(interpol);                                                             */

	 Pattern "list", number of line: 4990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern "%pi", number of line: 9954
   16-18   21-23   27-29   35-37
compare_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 3120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 7488
   58-61
                   (every #'digit-char-p (coerce params 'list)))

	 Pattern "5", number of line: 3120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "a)", number of line: 8111
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                        */

	 Pattern "list", number of line: 8112
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "%pi", number of line: 9957
   19-21   24-26   30-32   38-40
compare_bf_ft ([2*%pi, %pi, -%pi, -2*%pi, %e, %gamma, %phi, 1]);

	 Pattern "5", number of line: 8112
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                 */

	 Pattern "matrix", number of line: 9317
   20-25
    /* coef is the matrix of an homogeneous linear system */

	 Pattern "matrix", number of line: 9318
   17-22
    coef: apply(matrix,

	 Pattern ";;", number of line: 3627
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "start", number of line: 3628
   35-39   42-46
    (setq pos1 (search "~" ctrls :start2 start))

	 Pattern "+", number of line: 1143
   26-26
      then s: tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "when", number of line: 1836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern "+", number of line: 6805
   44-44
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "nil", number of line: 6805
   51-53
           (pow (parse-integer (subseq s (1+ pos) nil))) )

	 Pattern "list", number of line: 9319
   21-24
                makelist(block([x,y],

	 Pattern "list", number of line: 4326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "+", number of line: 1840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern "+", number of line: 4326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "start", number of line: 5518
   19-23
            (setq start pos2)

	 Pattern ";;", number of line: 1841
   1-2
;;  

	 Pattern ";;", number of line: 5520
   1-2
;; ~:P and ~:@P

	 Pattern "list", number of line: 4328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "5", number of line: 6180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 6180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "list", number of line: 4329
   10-13
    lov: listofvars(sol),

	 Pattern "nil", number of line: 6808
   73-75
          (setq s (cs* part1 (subseq part2 0 pow) "." (subseq part2 pow nil)))

	 Pattern "thru", number of line: 1146
   20-23
      else for i:2 thru n do(

	 Pattern "+", number of line: 6809
   23-23
          (and dd (> (+ dd pow) len)

	 Pattern "list", number of line: 4330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "draw2d", number of line: 6182
   4-9
/* draw2d(                                                                             */

	 Pattern "list", number of line: 4331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "lambda", number of line: 4331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern "list", number of line: 4332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 4332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "list", number of line: 4993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 4993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "error", number of line: 7489
   22-26
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 7489
   97-98
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern ";;", number of line: 554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "text", number of line: 7489
   37-40
                (gf-merror (intl:gettext "`printf': not supported directive ~~~m[") params) ))) ;; 0- vs. 1-based indexing

	 Pattern "list", number of line: 8113
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be      */

	 Pattern ";;", number of line: 7490
   1-2
;; ~?

	 Pattern "list", number of line: 4996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 4996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "list", number of line: 4999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern ";;", number of line: 7494
   40-41
                (let ((ind-ctrls arg)) ;; arg is a string

	 Pattern "a)", number of line: 8115
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any */

	 Pattern "kill", number of line: 5000
   2-5
 kill (aabb)...

	 Pattern "5", number of line: 3123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 3123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "list", number of line: 9322
   39-42
                                  makelist(x^k,k,1,r),

	 Pattern "draw2d", number of line: 3125
   4-9
/* draw2d(                                                                     */

	 Pattern ";;", number of line: 5521
   62-63
          ((and (string-equal "p" spec) (search ":" params)) ;; ':' backs up

	 Pattern "list", number of line: 9324
   39-42
                                  makelist(-y*x^k,k,1,m))),

	 Pattern "list", number of line: 9963
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=1;

	 Pattern "start", number of line: 5522
   20-24
             (setq start pos2)

	 Pattern "list", number of line: 9326
   14-17
    unk: makelist(gensym(), k, r+m+2),

	 Pattern "list", number of line: 9966
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=1;

	 Pattern "+", number of line: 9326
   33-33   35-35
    unk: makelist(gensym(), k, r+m+2),

	 Pattern ";;", number of line: 5524
   1-2
;; default part:

	 Pattern ";;", number of line: 5525
   1-2
;;

	 Pattern ";;", number of line: 5526
   1-2
;; loop ... 

	 Pattern "list", number of line: 9328
   14-17
    lovtab : listofvars(tab2),

	 Pattern "list", number of line: 9969
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=2;

	 Pattern "list", number of line: 9329
   10-13
    lov: listofvars(sol),

	 Pattern "+", number of line: 6810
   34-34
            (setq s (cs* s (ms* (+ dd pow (- len)) #\0))) ))

	 Pattern ";;", number of line: 1848
   1-2
;;  

	 Pattern ";;", number of line: 5529
   1-2
;; ~n{ and ~v{ etc. , set number of loops

	 Pattern ";;", number of line: 1850
   1-2
;;

	 Pattern ";;", number of line: 1851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "------------------------", number of line: 1851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "kill", number of line: 1853
   2-5
(kill (all),

	 Pattern "start", number of line: 3636
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos1) "~@a")

	 Pattern "nil", number of line: 559
   29-31
                      loops nil )

	 Pattern "nil", number of line: 7497
   59-61   63-65
                  (push (prepare-args ind-ctrls (cdr arg) nil nil) done)

	 Pattern "start", number of line: 3637
   56-60
          (concatenate 'string new-ctrls (subseq ctrls start pos2)) ))

	 Pattern "nil", number of line: 560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "when", number of line: 6817
   12-15
          (when (= len 0) (incf len))

	 Pattern "start", number of line: 3638
   13-17
      (setq start pos2  

	 Pattern "list", number of line: 4333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "+", number of line: 4333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 4335
   1-2
;;

	 Pattern "draw2d", number of line: 6188
   4-9
/* draw2d(                                                                             */

	 Pattern ";;", number of line: 4336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 4336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "nil", number of line: 564
   29-31
                      loops nil )

	 Pattern ";;", number of line: 4337
   1-2
;;

	 Pattern "load(interpol); ", number of line: 8119
   4-19
/* load(interpol);                                                             */

	 Pattern "start", number of line: 3639
   37-41   44-48
            pos1 (search "~" ctrls :start2 start) ))))

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 8120
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern ";;", number of line: 4338
   1-2
;; Formatted printing to character streams

	 Pattern "5", number of line: 8120
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                          */

	 Pattern "list", number of line: 9330
   10-13
    lov: listify(setdifference(setify(lov),setify(lovtab))),

	 Pattern "stream", number of line: 4338
   36-41
;; Formatted printing to character streams

	 Pattern ";;", number of line: 4339
   1-2
;;

	 Pattern "list", number of line: 9331
   53-56
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern ";;", number of line: 4340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 4340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "lambda", number of line: 9331
   20-25
    sol: subst(map(lambda([z1,z2], z1=z2), lov, makelist(1, k, length(lov))), sol),

	 Pattern ";;", number of line: 4341
   1-2
;; Licence       : GPL2

	 Pattern "list", number of line: 9332
   9-12   36-39
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 9332
   26-26
    makelist(sol[k],k,1,r+1) . makelist(defaults[1]^k,k,0,r) / 

	 Pattern "+", number of line: 6823
   26-26
          (and dd (> dd (+ len pow))

	 Pattern ";;", number of line: 4342
   1-2
;;

	 Pattern "list", number of line: 9333
   13-16   44-47
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern "5", number of line: 8123
   15-15
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "%pi", number of line: 8123
   19-21
/* map(f,[2.3,5/7,%pi]);                                                       */

	 Pattern "+", number of line: 9333
   28-28   32-32   34-34
        makelist(sol[k],k,r+2,r+2+m) . makelist(defaults[1]^k,k,0,m) )$

	 Pattern ";;", number of line: 6825
   1-2
;;  

	 Pattern ";;", number of line: 9335
   1-2
;;

	 Pattern "+", number of line: 3643
   13-13   23-23
  (do ((p (1+ pos1) (1+ p))) (())

	 Pattern ";;", number of line: 9336
   1-2
;;                                  ~*~  PRINTF  ~*~

	 Pattern "~*~  PRINTF  ~*~", number of line: 9336
   37-52
;;                                  ~*~  PRINTF  ~*~

	 Pattern "list", number of line: 9972
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=2;

	 Pattern "list", number of line: 1863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "list", number of line: 9975
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=4;

	 Pattern "+", number of line: 5533
   29-29
                (do ((p 1 (1+ p)))

	 Pattern "+", number of line: 1152
   21-21
               s: s + apply('charfun2,[defaults[1], a, b]) *

	 Pattern "nil", number of line: 565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "list", number of line: 9978
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=4;

	 Pattern "aj", number of line: 6193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern "thru", number of line: 1864
   15-18
    for k : 0 thru n - 1

	 Pattern "[]", number of line: 3644
   63-64
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern "+", number of line: 1865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 1865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "+", number of line: 3644
   36-36
    (and (search (subseq ctrls p (1+ p)) "abcdefghoprstx%{}^&$[]?~<>;ABCDEFGHOPRSTX

	 Pattern ";;", number of line: 3645
   4-5
") ;;  newline possible spec

	 Pattern "draw2d", number of line: 8125
   4-9
/* draw2d(                                                                     */

	 Pattern "newline", number of line: 3645
   8-14
") ;;  newline possible spec

	 Pattern "+", number of line: 6830
   32-32
        (when at (setq s (cs* "+" s))) )

	 Pattern "when", number of line: 6830
   10-13
        (when at (setq s (cs* "+" s))) )

	 Pattern "list", number of line: 9981
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=8;

	 Pattern ";;", number of line: 4343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern ";;", number of line: 6831
   1-2
;;  

	 Pattern ";;", number of line: 4344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "when", number of line: 6832
   8-11
      (when (or ed xp)

	 Pattern "stringproc.texi ", number of line: 4344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 4345
   1-2
;;

	 Pattern "+", number of line: 3647
   17-17
      (return (1+ p)) )))

	 Pattern "list", number of line: 9984
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=8;

	 Pattern "for i in select do", number of line: 6197
   4-21
   for i in select do(

	 Pattern ";;", number of line: 3650
   1-2
;;  helper for ~v,v,v<spec>

	 Pattern "list", number of line: 9987
   17-20
compare_ft (makelist (2 * random (1.0) - 1, i, 1, n)), n=16;

	 Pattern "format", number of line: 4349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern ";;", number of line: 3651
   1-2
;;

	 Pattern "list", number of line: 9990
   20-23
compare_bf_ft (makelist (bfloat(2 * random (1.0) - 1), i, 1, n)), n=16;

	 Pattern ";;", number of line: 9337
   1-2
;;

	 Pattern ";;", number of line: 9338
   1-2
;; Formatted printing to character streams

	 Pattern "error", number of line: 6202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "stream", number of line: 9338
   36-41
;; Formatted printing to character streams

	 Pattern "not correct", number of line: 6202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern ";;", number of line: 9339
   1-2
;;

	 Pattern "when", number of line: 6836
   12-15
          (when (< xp 0) (setq xps (subseq xps 1)))

	 Pattern ";;", number of line: 9340
   1-2
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern "5", number of line: 9340
   23-23   28-28
;; Copyright     : 2005-2015 Volker van Nek

	 Pattern ";;", number of line: 9341
   1-2
;; Licence       : GPL2

	 Pattern "+", number of line: 3655
   17-17
    (do ((p 0 (1+ p)) (len (length params)) (n 0))

	 Pattern ";;", number of line: 9342
   1-2
;;

	 Pattern ";;", number of line: 9343
   1-2
;; Test file     : rtestprintf.mac (lots of examples)

	 Pattern "+", number of line: 1153
   42-42
                      expand( tab2[i][2] + (tab2[i][2]-tab2[i-1][2]) *

	 Pattern "+", number of line: 3657
   49-49
      (and (string-equal "v" (subseq params p (1+ p)))

	 Pattern "+", number of line: 6840
   48-48
          (setq s (cs* s "b" (if (< xp 0) "-" "+") xps)) ))

	 Pattern ";;", number of line: 6841
   1-2
;;  

	 Pattern ";;", number of line: 9344
   1-2
;; Documentation : stringproc.texi 

	 Pattern "stringproc.texi ", number of line: 9344
   20-35
;; Documentation : stringproc.texi 

	 Pattern ";;", number of line: 9345
   1-2
;;

	 Pattern "+", number of line: 5540
   47-47
                        ch (subseq params p (1+ p))) )

	 Pattern "+", number of line: 3659
   19-19
        (setq n (1+ n)) ))))

	 Pattern "list", number of line: 1869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern ";;", number of line: 3662
   1-2
;;  helper for ~v,#,vH

	 Pattern "interpolation", number of line: 1160
   18-30
/* Cubic splines interpolation. The argument must be either:                           */

	 Pattern "thru", number of line: 1870
   15-18
    for j : 0 thru n - 1

	 Pattern "list", number of line: 575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "+", number of line: 1871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "5", number of line: 1161
   45-45
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "%pi", number of line: 1871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "matrix", number of line: 1161
   21-26   31-36
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "list", number of line: 9993
   17-20
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "5", number of line: 9993
   32-32
compare_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "error", number of line: 6204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 6204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "nil", number of line: 577
   27-29
                          nil 

	 Pattern "error", number of line: 6206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "list", number of line: 9996
   20-23
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "not correct", number of line: 6206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "5", number of line: 9996
   35-35
compare_bf_ft (makelist (random (256), i, 1, 8)); /* integers */

	 Pattern "format", number of line: 9349
   49-54
`$printf' is an interface to the Lisp function `format'.

	 Pattern "a)", number of line: 1161
   5-6
/*  a) a two column matrix, p:matrix([2,4],[5,6],[9,3])                                */

	 Pattern "nil", number of line: 578
   27-29
                          nil )))

	 Pattern "list", number of line: 9999
   17-20
compare_ft (makelist (bfloat (2 * random (1.0) - 1), i, 1, 8)); /* bigfloats */

	 Pattern ";;", number of line: 3663
   1-2
;;

	 Pattern "nil", number of line: 580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "format", number of line: 4353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "format", number of line: 9353
   20-25
Before passing to `format' ctrls and args are both visited and modified:

	 Pattern "+", number of line: 3666
   17-17
    (do ((p 0 (1+ p)) (len (length params)))

	 Pattern "start", number of line: 582
   23-27
                      start pos2 )

	 Pattern "interpolation", number of line: 6208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "nil", number of line: 3667
   20-22
        ((= p len) nil)

	 Pattern "+", number of line: 3668
   39-39
      (and (search (subseq params p (1+ p)) "vV#")

	 Pattern "list", number of line: 1162
   10-13
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "5", number of line: 1162
   36-36
/*  b) a list of pairs, p: [[2,4],[5,6],[9,3]]                                         */

	 Pattern "list", number of line: 1163
   10-13
/*  c) a list of numbers, p: [4,6,3], in which case the abscissas will be              */

	 Pattern ";;", number of line: 6848
   1-2
;;  

	 Pattern "case of two", number of line: 6210
   14-24
   if n=2 /* case of two points */

	 Pattern ";;", number of line: 6850
   1-2
;;

	 Pattern "when", number of line: 583
   18-21
                (when loops 

	 Pattern ";;", number of line: 6851
   1-2   79-80
;; -------------------------------------------------------------------------- ;;

	 Pattern "+", number of line: 6211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "------------------------", number of line: 6851
   4-27   5-28   6-29   7-30   8-31   9-32   10-33   11-34   12-35   13-36   14-37   15-38   16-39   17-40   18-41   19-42   20-43   21-44   22-45   23-46   24-47   25-48   26-49   27-50   28-51   29-52   30-53   31-54   32-55   33-56   34-57   35-58   36-59   37-60   38-61   39-62   40-63   41-64   42-65   43-66   44-67   45-68   46-69   47-70   48-71   49-72   50-73   51-74   52-75   53-76   54-77
;; -------------------------------------------------------------------------- ;;

	 Pattern "a)", number of line: 1165
   13-14
/* In cases a) and b) the pairs are ordered wrt the 1st. coordinate before any         */

	 Pattern "nil", number of line: 585
   31-33
                  (setq loops nil) )

	 Pattern "kill", number of line: 6853
   2-5
(kill (all),

	 Pattern "kill", number of line: 10000
   2-5
 kill (aabb)...

	 Pattern ";;", number of line: 3673
   1-2
;;  find positions of matching braces

	 Pattern ";;", number of line: 5554
   1-2
;; ~{ and ~:{ and ~@{ and  ~:@{ 

	 Pattern "a)", number of line: 4363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 4363
   1-20
(in-package :maxima)

	 Pattern ";;", number of line: 4365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern ";;", number of line: 4366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "a)", number of line: 9363
   19-20
(in-package :maxima)

	 Pattern "(in-package :maxima)", number of line: 9363
   1-20
(in-package :maxima)

	 Pattern ";;", number of line: 4367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern ";;", number of line: 4368
   1-2
;;

	 Pattern "nil", number of line: 5559
   29-31
                      loops nil )

	 Pattern ";;", number of line: 9365
   1-2
;; This is an implementation of the formerly src/plot.lisp/$sprint 

	 Pattern ";;", number of line: 3674
   1-2
;;

	 Pattern ";;", number of line: 9366
   1-2
;; as a simple wrapper for printf(true,"~@{~a ~}",x,y,z,...)

	 Pattern "start", number of line: 3675
   30-34
(defun iter-positions (ctrls start)

	 Pattern ";;", number of line: 9367
   1-2
;; keeping the original return value: the first argument resp. false

	 Pattern "start", number of line: 3676
   27-31
  (let (pos1 pos2 (end (+ start 2))

	 Pattern "+", number of line: 3676
   25-25
  (let (pos1 pos2 (end (+ start 2))

	 Pattern ";;", number of line: 9368
   1-2
;;

	 Pattern "list", number of line: 6863
   13-16
    y : makelist (0, i, 1, n),

	 Pattern "list", number of line: 3679
   21-24
        ((zerop n) (list start end))

	 Pattern "start", number of line: 3679
   26-30
        ((zerop n) (list start end))

	 Pattern "thru", number of line: 6864
   15-18
    for k : 0 thru n - 1

	 Pattern "start", number of line: 3680
   37-41
      (setq pos1 (search "~" ctrls :start2 end) 

	 Pattern "+", number of line: 6865
   16-16   40-40   52-52
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "%pi", number of line: 6865
   62-64
        do y[1 + k] : (1/n) * sum (x[1 + j] * exp (+2 * %i * %pi * j * k / n), j, 0, n - 1),

	 Pattern "list", number of line: 6217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern "list", number of line: 6218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "nil", number of line: 5560
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "when", number of line: 3683
   8-11
      (when (string-equal spec "{") (incf n))

	 Pattern "list", number of line: 6869
   13-16
    x : makelist (0, i, 1, n),

	 Pattern "when", number of line: 3684
   8-11
      (when (string-equal spec "}") (decf n))

	 Pattern "thru", number of line: 6870
   15-18
    for j : 0 thru n - 1

	 Pattern "nil", number of line: 5564
   29-31
                      loops nil )

	 Pattern "+", number of line: 6871
   16-16   31-31
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "%pi", number of line: 6871
   53-55
        do x[1 + j]: sum (y[1 + k] * exp (-2 * %i * %pi * j * k / n), k, 0, n - 1),

	 Pattern "nil", number of line: 5565
   56-58
                (push (prepare-args subctrls (cdr arg) nil t) done) )

	 Pattern "+", number of line: 3689
   15-15
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "load(interpol); ", number of line: 1176
   4-19
/* load(interpol);                                                                     */

	 Pattern "p:[[7,2],[8,2],[1,5],[3,2],[6,7]]", number of line: 1177
   4-36
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "nil", number of line: 3689
   49-51
  (do ((p 0 (1+ p)) (len (length params)) (prms nil) (prm ""))

	 Pattern "5", number of line: 1177
   22-22
/* p:[[7,2],[8,2],[1,5],[3,2],[6,7]]$                                                  */

	 Pattern "list", number of line: 598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "+", number of line: 3692
   40-40
      ((and (search (subseq params p (1+ p)) ",@")

	 Pattern "nil", number of line: 600
   27-29
                          nil 

	 Pattern "nil", number of line: 601
   27-29
                          nil ))) 

	 Pattern "+", number of line: 3696
   41-41
      ((and (string= (subseq params p (1+ p)) ",")

	 Pattern "thru", number of line: 6229
   12-15
   for i:2 thru n-1 do (

	 Pattern "5", number of line: 1180
   15-15
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "%pi", number of line: 1180
   19-21
/* map(f,[2.3,5/7,%pi]);                                                               */

	 Pattern "+", number of line: 6230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "nil", number of line: 603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "+", number of line: 6231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern "list", number of line: 5575
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "start", number of line: 605
   23-27
                      start pos2 )

	 Pattern "draw2d", number of line: 1182
   4-9
/* draw2d(                                                                             */

	 Pattern "+", number of line: 6233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern "when", number of line: 606
   18-21
                (when loops 

	 Pattern "+", number of line: 6235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "nil", number of line: 608
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 610
   1-2
;; ... or don't loop ...

	 Pattern "+", number of line: 3701
   36-36
      ((string= (subseq params p (1+ p)) "'")

	 Pattern "nil", number of line: 5577
   27-29
                          nil 

	 Pattern "nil", number of line: 3702
   9-11
        nil )

	 Pattern "nil", number of line: 5578
   27-29
                          nil )))

	 Pattern "+", number of line: 3704
   63-63
        (setq prm (concatenate 'string prm (subseq params p (1+ p)))) ))))

	 Pattern "draw2d", number of line: 1188
   4-9
/* draw2d(                                                                             */

	 Pattern "nil", number of line: 5580
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "start", number of line: 5582
   23-27
                      start pos2 )

	 Pattern "when", number of line: 5583
   18-21
                (when loops 

	 Pattern "+", number of line: 6244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern ";;", number of line: 613
   1-2
;; ... set the position in ctrls ...

	 Pattern ";;", number of line: 3709
   1-2
;; ~w,d,e,x,o,p@H

	 Pattern "start", number of line: 615
   15-19
        (setq start pos2)

	 Pattern "thru", number of line: 6247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern ";;", number of line: 616
   1-2
;; ... and take the next argument

	 Pattern "+", number of line: 6248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "aj", number of line: 1193
   51-52
                               qn, un, a, b, s:0, aj, bj, cj, dj, ratprint:false,tab2],

	 Pattern ";;", number of line: 3713
   27-28
          (($numberp arg) ;; Maxima rational, float

	 Pattern "thru", number of line: 6251
   12-15
   for j:2 thru n do (

	 Pattern ";;", number of line: 3715
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 3715
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 3716
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "nil", number of line: 5585
   31-33
                  (setq loops nil) )

	 Pattern "for i in select do", number of line: 1197
   4-21
   for i in select do(

	 Pattern "nil", number of line: 3716
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "start", number of line: 624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "nil", number of line: 624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "error", number of line: 3719
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 3719
   33-36
            (gf-merror (intl:gettext 

	 Pattern "error", number of line: 1202
   12-16
      then error("Option 'd1' is not correct"),

	 Pattern "not correct", number of line: 1202
   34-44
      then error("Option 'd1' is not correct"),

	 Pattern "error", number of line: 1204
   12-16
      then error("Option 'dn' is not correct"),

	 Pattern "not correct", number of line: 1204
   34-44
      then error("Option 'dn' is not correct"),

	 Pattern "error", number of line: 1206
   12-16
      then error("Option 'varname' is not correct"),

	 Pattern "not correct", number of line: 1206
   39-49
      then error("Option 'varname' is not correct"),

	 Pattern "list", number of line: 5598
   28-31   42-45
                          (list (cons '(mlist) 

	 Pattern "interpolation", number of line: 1208
   48-60
   /* if tab2 contains only two points, linear interpolation */

	 Pattern "case of two", number of line: 1210
   14-24
   if n=2 /* case of two points */

	 Pattern "+", number of line: 1211
   39-39
      then return(ratsimp( tab2[2][2] + (tab2[2][2]-tab2[1][2]) *

	 Pattern "nil", number of line: 5600
   27-29
                          nil 

	 Pattern "nil", number of line: 5601
   27-29
                          nil ))) 

	 Pattern "nil", number of line: 5603
   58-60
                (setq todo (if loops (nthcdr loops todo) nil)

	 Pattern "start", number of line: 5605
   23-27
                      start pos2 )

	 Pattern "list", number of line: 1217
   12-15
   y2: makelist(0,i,1,n),

	 Pattern ";;", number of line: 3735
   1-2
;; ~E, ~F, ~G

	 Pattern "list", number of line: 1218
   11-14
   u: makelist(0,i,1,n-1),

	 Pattern "when", number of line: 5606
   18-21
                (when loops 

	 Pattern "nil", number of line: 5608
   31-33
                  (setq loops nil) )

	 Pattern ";;", number of line: 3739
   27-28
          (($numberp arg) ;; Maxima rational, bigfloat

	 Pattern ";;", number of line: 5610
   1-2
;; ... or don't loop ...

	 Pattern ";;", number of line: 3741
   34-35
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "%pi", number of line: 3741
   37-39
          ((and ($constantp arg) ;; %pi, sqrt(2), ...

	 Pattern "list", number of line: 3742
   71-74
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern ";;", number of line: 5613
   1-2
;; ... set the position in ctrls ...

	 Pattern "nil", number of line: 3742
   57-59
                ($freeof '$%i arg) (not (member arg '(t nil))) (not ($listp arg)))

	 Pattern "start", number of line: 5615
   15-19
        (setq start pos2)

	 Pattern ";;", number of line: 5616
   1-2
;; ... and take the next argument

	 Pattern "error", number of line: 3745
   18-22
            (gf-merror (intl:gettext 

	 Pattern "text", number of line: 3745
   33-36
            (gf-merror (intl:gettext 

	 Pattern "thru", number of line: 1229
   12-15
   for i:2 thru n-1 do (

	 Pattern "+", number of line: 1230
   49-49
      sig: (tab2[i][1] - tab2[i-1][1]) / (tab2[i+1][1] - tab2[i-1][1]),

	 Pattern "+", number of line: 1231
   24-24
      p: sig * y2[i-1] + 2,

	 Pattern ";;", number of line: 3747
   1-2
;; ~D

	 Pattern "+", number of line: 1233
   20-20   49-49
      u[i]: (tab2[i+1][2] - tab2[i][2]) /(tab2[i+1][1] - tab2[i][1]) -

	 Pattern ";;", number of line: 3751
   27-28
          (($numberp arg) ;; Maxima rational, (big)float

	 Pattern "+", number of line: 1235
   32-32
      u[i]: (6 * u[i] / (tab2[i+1][1] - tab2[i-1][1]) - sig * u[i-1]) / p ) ,

	 Pattern "start", number of line: 5624
   10-14
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "nil", number of line: 5624
   25-27
  (let ((start 0) (pos1 nil) (pos2 0)

	 Pattern "+", number of line: 1244
   46-46
   y2[n]: (un - qn * u[n-1]) / (qn * y2[n-1] + 1),

	 Pattern "thru", number of line: 1247
   15-18
   for k: n-1 thru 1 step -1 do

	 Pattern "+", number of line: 1248
   26-26   30-30
      y2[k]: y2[k] * y2[k+1] + u[k],

	 Pattern "thru", number of line: 1251
   12-15
   for j:2 thru n do (
